# generated code, do not edit!

#ApiKey: Produce, 0
ProduceRequestV3 => transactional_id acks timeout_ms [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name [partition_data]
    name => STRING
    partition_data => index records
      index => INT32
      records => RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.


ProduceRequestV4 => transactional_id acks timeout_ms [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name [partition_data]
    name => STRING
    partition_data => index records
      index => INT32
      records => RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.


ProduceRequestV5 => transactional_id acks timeout_ms [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name [partition_data]
    name => STRING
    partition_data => index records
      index => INT32
      records => RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.


ProduceRequestV6 => transactional_id acks timeout_ms [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name [partition_data]
    name => STRING
    partition_data => index records
      index => INT32
      records => RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.


ProduceRequestV7 => transactional_id acks timeout_ms [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name [partition_data]
    name => STRING
    partition_data => index records
      index => INT32
      records => RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.


ProduceRequestV8 => transactional_id acks timeout_ms [topic_data]
  transactional_id => NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name [partition_data]
    name => STRING
    partition_data => index records
      index => INT32
      records => RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.


ProduceRequestV9 => transactional_id acks timeout_ms {topic_data} TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name {partition_data} TAG_BUFFER
    name => COMPACT_STRING
    partition_data => index records TAG_BUFFER
      index => INT32
      records => COMPACT_RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ProduceRequestV10 => transactional_id acks timeout_ms {topic_data} TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name {partition_data} TAG_BUFFER
    name => COMPACT_STRING
    partition_data => index records TAG_BUFFER
      index => INT32
      records => COMPACT_RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ProduceRequestV11 => transactional_id acks timeout_ms {topic_data} TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name {partition_data} TAG_BUFFER
    name => COMPACT_STRING
    partition_data => index records TAG_BUFFER
      index => INT32
      records => COMPACT_RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ProduceRequestV12 => transactional_id acks timeout_ms {topic_data} TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => name {partition_data} TAG_BUFFER
    name => COMPACT_STRING
    partition_data => index records TAG_BUFFER
      index => INT32
      records => COMPACT_RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# name: The topic name.
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ProduceRequestV13 => transactional_id acks timeout_ms {topic_data} TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  acks => INT16
  timeout_ms => INT32
  topic_data => topic_id {partition_data} TAG_BUFFER
    topic_id => UUID
    partition_data => index records TAG_BUFFER
      index => INT32
      records => COMPACT_RECORDS

# transactional_id: The transactional ID, or null if the producer is not transactional.
# acks: The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments, 1 for only the leader and -1 for the full ISR.
# timeout_ms: The timeout to await a response in milliseconds.
# topic_data: Each topic to produce to.
# topic_id: The unique topic ID
# partition_data: Each partition to produce to.
# index: The partition index.
# records: The record data to be produced.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields








ProduceResponseV3 => [responses] throttle_time_ms
  responses => name [partition_responses]
    name => STRING
    partition_responses => index error_code base_offset log_append_time_ms
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ProduceResponseV4 => [responses] throttle_time_ms
  responses => name [partition_responses]
    name => STRING
    partition_responses => index error_code base_offset log_append_time_ms
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ProduceResponseV5 => [responses] throttle_time_ms
  responses => name [partition_responses]
    name => STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ProduceResponseV6 => [responses] throttle_time_ms
  responses => name [partition_responses]
    name => STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ProduceResponseV7 => [responses] throttle_time_ms
  responses => name [partition_responses]
    name => STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ProduceResponseV8 => [responses] throttle_time_ms
  responses => name [partition_responses]
    name => STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset [record_errors] error_message
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message
        batch_index => INT32
        batch_index_error_message => NULLABLE_STRING
      error_message => NULLABLE_STRING
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# record_errors: The batch indices of records that caused the batch to be dropped.
# batch_index: The batch index of the record that caused the batch to be dropped.
# batch_index_error_message: The error message of the record that caused the batch to be dropped.
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ProduceResponseV9 => {responses} throttle_time_ms TAG_BUFFER
  responses => name {partition_responses} TAG_BUFFER
    name => COMPACT_STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset {record_errors} error_message TAG_BUFFER
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message TAG_BUFFER
        batch_index => INT32
        batch_index_error_message => COMPACT_NULLABLE_STRING
      error_message => COMPACT_NULLABLE_STRING
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# record_errors: The batch indices of records that caused the batch to be dropped.
# batch_index: The batch index of the record that caused the batch to be dropped.
# batch_index_error_message: The error message of the record that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


ProduceResponseV10 => {responses} throttle_time_ms TAG_BUFFER
  responses => name {partition_responses} TAG_BUFFER
    name => COMPACT_STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset {record_errors} error_message TAG_BUFFER
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message TAG_BUFFER
        batch_index => INT32
        batch_index_error_message => COMPACT_NULLABLE_STRING
      error_message => COMPACT_NULLABLE_STRING
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# record_errors: The batch indices of records that caused the batch to be dropped.
# batch_index: The batch index of the record that caused the batch to be dropped.
# batch_index_error_message: The error message of the record that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


ProduceResponseV11 => {responses} throttle_time_ms TAG_BUFFER
  responses => name {partition_responses} TAG_BUFFER
    name => COMPACT_STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset {record_errors} error_message TAG_BUFFER
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message TAG_BUFFER
        batch_index => INT32
        batch_index_error_message => COMPACT_NULLABLE_STRING
      error_message => COMPACT_NULLABLE_STRING
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# record_errors: The batch indices of records that caused the batch to be dropped.
# batch_index: The batch index of the record that caused the batch to be dropped.
# batch_index_error_message: The error message of the record that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


ProduceResponseV12 => {responses} throttle_time_ms TAG_BUFFER
  responses => name {partition_responses} TAG_BUFFER
    name => COMPACT_STRING
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset {record_errors} error_message TAG_BUFFER
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message TAG_BUFFER
        batch_index => INT32
        batch_index_error_message => COMPACT_NULLABLE_STRING
      error_message => COMPACT_NULLABLE_STRING
  throttle_time_ms => INT32

# responses: Each produce response.
# name: The topic name.
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# record_errors: The batch indices of records that caused the batch to be dropped.
# batch_index: The batch index of the record that caused the batch to be dropped.
# batch_index_error_message: The error message of the record that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


ProduceResponseV13 => {responses} throttle_time_ms TAG_BUFFER
  responses => topic_id {partition_responses} TAG_BUFFER
    topic_id => UUID
    partition_responses => index error_code base_offset log_append_time_ms log_start_offset {record_errors} error_message TAG_BUFFER
      index => INT32
      error_code => INT16
      base_offset => INT64
      log_append_time_ms => INT64
      log_start_offset => INT64
      record_errors => batch_index batch_index_error_message TAG_BUFFER
        batch_index => INT32
        batch_index_error_message => COMPACT_NULLABLE_STRING
      error_message => COMPACT_NULLABLE_STRING
  throttle_time_ms => INT32

# responses: Each produce response.
# topic_id: The unique topic ID
# partition_responses: Each partition that we produced to within the topic.
# index: The partition index.
# error_code: The error code, or 0 if there was no error.
# base_offset: The base offset.
# log_append_time_ms: The timestamp returned by broker after appending the messages. If CreateTime is used for the topic, the timestamp will be -1.  If LogAppendTime is used for the topic, the timestamp will be the broker local time when the messages are appended.
# log_start_offset: The log start offset.
# record_errors: The batch indices of records that caused the batch to be dropped.
# batch_index: The batch index of the record that caused the batch to be dropped.
# batch_index_error_message: The error message of the record that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# error_message: The global error message summarizing the common root cause of the records that caused the batch to be dropped.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: Fetch, 1
FetchRequestV4 => replica_id max_wait_ms min_bytes max_bytes isolation_level [topics]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      partition_max_bytes => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# fetch_offset: The message offset.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.


FetchRequestV5 => replica_id max_wait_ms min_bytes max_bytes isolation_level [topics]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.


FetchRequestV6 => replica_id max_wait_ms min_bytes max_bytes isolation_level [topics]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.


FetchRequestV7 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic: The topic name.
# partitions: The partitions indexes to forget.


FetchRequestV8 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic: The topic name.
# partitions: The partitions indexes to forget.


FetchRequestV9 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic: The topic name.
# partitions: The partitions indexes to forget.


FetchRequestV10 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data]
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic: The topic name.
# partitions: The partitions indexes to forget.


FetchRequestV11 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch [topics] [forgotten_topics_data] rack_id
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch fetch_offset log_start_offset partition_max_bytes
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic [partitions]
    topic => STRING
    partitions => INT32
  rack_id => STRING

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic: The topic name.
# partitions: The partitions indexes to forget.
# rack_id: Rack ID of the consumer making this request.


FetchRequestV12 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => INT32
  rack_id => COMPACT_STRING

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic: The topic name.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields


FetchRequestV13 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32
  rack_id => COMPACT_STRING

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields


FetchRequestV14 => replica_id max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  replica_id => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32
  rack_id => COMPACT_STRING

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields


FetchRequestV15 => max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32
  rack_id => COMPACT_STRING

# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields


FetchRequestV16 => max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32
  rack_id => COMPACT_STRING

# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields


FetchRequestV17 => max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32
  rack_id => COMPACT_STRING

# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields


FetchRequestV18 => max_wait_ms min_bytes max_bytes isolation_level session_id session_epoch {topics} {forgotten_topics_data} rack_id TAG_BUFFER
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  isolation_level => INT8
  session_id => INT32
  session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition current_leader_epoch fetch_offset last_fetched_epoch log_start_offset partition_max_bytes TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      fetch_offset => INT64
      last_fetched_epoch => INT32
      log_start_offset => INT64
      partition_max_bytes => INT32
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32
  rack_id => COMPACT_STRING

# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch.  See KIP-74 for cases where this limit may not be honored.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# session_id: The fetch session ID.
# session_epoch: The fetch session epoch, which is used for ordering requests in a session.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition.
# fetch_offset: The message offset.
# last_fetched_epoch: The epoch of the last fetched record or -1 if there is none.
# log_start_offset: The earliest available offset of the follower replica.  The field is only used when the request is sent by the follower.
# partition_max_bytes: The maximum bytes to fetch from this partition.  See KIP-74 for cases where this limit may not be honored.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: In an incremental fetch request, the partitions to remove.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# rack_id: Rack ID of the consumer making this request.
# _tagged_fields: The tagged fields










FetchResponseV4 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV5 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV6 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV7 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV8 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV9 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV10 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# records: The record data.


FetchResponseV11 => throttle_time_ms error_code session_id [responses]
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic [partitions]
    topic => STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset [aborted_transactions] preferred_read_replica records
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.


FetchResponseV12 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic: The topic name.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchResponseV13 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchResponseV14 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchResponseV15 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchResponseV16 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchResponseV17 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchResponseV18 => throttle_time_ms error_code session_id {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  session_id => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code high_watermark last_stable_offset log_start_offset {aborted_transactions} preferred_read_replica records TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      high_watermark => INT64
      last_stable_offset => INT64
      log_start_offset => INT64
      aborted_transactions => producer_id first_offset TAG_BUFFER
        producer_id => INT64
        first_offset => INT64
      preferred_read_replica => INT32
      records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# session_id: The fetch session ID, or 0 if this is not part of a fetch session.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# high_watermark: The current high water mark.
# last_stable_offset: The last stable offset (or LSO) of the partition. This is the last offset such that the state of all transactional records prior to this offset have been decided (ABORTED or COMMITTED).
# log_start_offset: The current log start offset.
# aborted_transactions: The aborted transactions.
# producer_id: The producer id associated with the aborted transaction.
# first_offset: The first offset in the aborted transaction.
# _tagged_fields: The tagged fields
# preferred_read_replica: The preferred read replica for the consumer to use on its next fetch request.
# records: The record data.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListOffsets, 2
ListOffsetsRequestV1 => replica_id [topics]
  replica_id => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index timestamp
      partition_index => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# timestamp: The current timestamp.


ListOffsetsRequestV2 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => name [partitions]
    name => STRING
    partitions => partition_index timestamp
      partition_index => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# timestamp: The current timestamp.


ListOffsetsRequestV3 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => name [partitions]
    name => STRING
    partitions => partition_index timestamp
      partition_index => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# timestamp: The current timestamp.


ListOffsetsRequestV4 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => name [partitions]
    name => STRING
    partitions => partition_index current_leader_epoch timestamp
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.


ListOffsetsRequestV5 => replica_id isolation_level [topics]
  replica_id => INT32
  isolation_level => INT8
  topics => name [partitions]
    name => STRING
    partitions => partition_index current_leader_epoch timestamp
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.


ListOffsetsRequestV6 => replica_id isolation_level {topics} TAG_BUFFER
  replica_id => INT32
  isolation_level => INT8
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index current_leader_epoch timestamp TAG_BUFFER
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsRequestV7 => replica_id isolation_level {topics} TAG_BUFFER
  replica_id => INT32
  isolation_level => INT8
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index current_leader_epoch timestamp TAG_BUFFER
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsRequestV8 => replica_id isolation_level {topics} TAG_BUFFER
  replica_id => INT32
  isolation_level => INT8
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index current_leader_epoch timestamp TAG_BUFFER
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsRequestV9 => replica_id isolation_level {topics} TAG_BUFFER
  replica_id => INT32
  isolation_level => INT8
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index current_leader_epoch timestamp TAG_BUFFER
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsRequestV10 => replica_id isolation_level {topics} timeout_ms TAG_BUFFER
  replica_id => INT32
  isolation_level => INT8
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index current_leader_epoch timestamp TAG_BUFFER
      partition_index => INT32
      current_leader_epoch => INT32
      timestamp => INT64
  timeout_ms => INT32

# replica_id: The broker ID of the requester, or -1 if this request is being made by a normal consumer.
# isolation_level: This setting controls the visibility of transactional records. Using READ_UNCOMMITTED (isolation_level = 0) makes all records visible. With READ_COMMITTED (isolation_level = 1), non-transactional and COMMITTED transactional records are visible. To be more concrete, READ_COMMITTED returns all data from offsets smaller than the current LSO (last stable offset), and enables the inclusion of the list of aborted transactions in the result, which allows consumers to discard ABORTED transactional records.
# topics: Each topic in the request.
# name: The topic name.
# partitions: Each partition in the request.
# partition_index: The partition index.
# current_leader_epoch: The current leader epoch.
# timestamp: The current timestamp.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: The timeout to await a response in milliseconds for requests that require reading from remote storage for topics enabled with tiered storage.
# _tagged_fields: The tagged fields




ListOffsetsResponseV1 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code timestamp offset
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64

# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.


ListOffsetsResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code timestamp offset
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.


ListOffsetsResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code timestamp offset
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.


ListOffsetsResponseV4 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code timestamp offset leader_epoch
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.


ListOffsetsResponseV5 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code timestamp offset leader_epoch
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.


ListOffsetsResponseV6 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code timestamp offset leader_epoch TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsResponseV7 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code timestamp offset leader_epoch TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsResponseV8 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code timestamp offset leader_epoch TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsResponseV9 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code timestamp offset leader_epoch TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListOffsetsResponseV10 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code timestamp offset leader_epoch TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      timestamp => INT64
      offset => INT64
      leader_epoch => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# timestamp: The timestamp associated with the returned offset.
# offset: The returned offset.
# leader_epoch: The leader epoch associated with the returned offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: Metadata, 3
MetadataRequestV0 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV1 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV2 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV3 => [topics]
  topics => name
    name => STRING

# topics: The topics to fetch metadata for.
# name: The topic name.


MetadataRequestV4 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV5 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV6 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV7 => [topics] allow_auto_topic_creation
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.


MetadataRequestV8 => [topics] allow_auto_topic_creation include_cluster_authorized_operations include_topic_authorized_operations
  topics => name
    name => STRING
  allow_auto_topic_creation => BOOLEAN
  include_cluster_authorized_operations => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# include_topic_authorized_operations: Whether to include topic authorized operations.


MetadataRequestV9 => {topics} allow_auto_topic_creation include_cluster_authorized_operations include_topic_authorized_operations TAG_BUFFER
  topics => name TAG_BUFFER
    name => COMPACT_STRING
  allow_auto_topic_creation => BOOLEAN
  include_cluster_authorized_operations => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# name: The topic name.
# _tagged_fields: The tagged fields
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# include_topic_authorized_operations: Whether to include topic authorized operations.
# _tagged_fields: The tagged fields


MetadataRequestV10 => {topics} allow_auto_topic_creation include_cluster_authorized_operations include_topic_authorized_operations TAG_BUFFER
  topics => topic_id name TAG_BUFFER
    topic_id => UUID
    name => COMPACT_NULLABLE_STRING
  allow_auto_topic_creation => BOOLEAN
  include_cluster_authorized_operations => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# topic_id: The topic id.
# name: The topic name.
# _tagged_fields: The tagged fields
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# include_topic_authorized_operations: Whether to include topic authorized operations.
# _tagged_fields: The tagged fields


MetadataRequestV11 => {topics} allow_auto_topic_creation include_topic_authorized_operations TAG_BUFFER
  topics => topic_id name TAG_BUFFER
    topic_id => UUID
    name => COMPACT_NULLABLE_STRING
  allow_auto_topic_creation => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# topic_id: The topic id.
# name: The topic name.
# _tagged_fields: The tagged fields
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_topic_authorized_operations: Whether to include topic authorized operations.
# _tagged_fields: The tagged fields


MetadataRequestV12 => {topics} allow_auto_topic_creation include_topic_authorized_operations TAG_BUFFER
  topics => topic_id name TAG_BUFFER
    topic_id => UUID
    name => COMPACT_NULLABLE_STRING
  allow_auto_topic_creation => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# topic_id: The topic id.
# name: The topic name.
# _tagged_fields: The tagged fields
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_topic_authorized_operations: Whether to include topic authorized operations.
# _tagged_fields: The tagged fields


MetadataRequestV13 => {topics} allow_auto_topic_creation include_topic_authorized_operations TAG_BUFFER
  topics => topic_id name TAG_BUFFER
    topic_id => UUID
    name => COMPACT_NULLABLE_STRING
  allow_auto_topic_creation => BOOLEAN
  include_topic_authorized_operations => BOOLEAN

# topics: The topics to fetch metadata for.
# topic_id: The topic id.
# name: The topic name.
# _tagged_fields: The tagged fields
# allow_auto_topic_creation: If this is true, the broker may auto-create topics that we requested which do not already exist, if it is configured to do so.
# include_topic_authorized_operations: Whether to include topic authorized operations.
# _tagged_fields: The tagged fields


MetadataResponseV0 => [brokers] [topics]
  brokers => node_id host port
    node_id => INT32
    host => STRING
    port => INT32
  topics => error_code name [partitions]
    error_code => INT16
    name => STRING
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV1 => [brokers] controller_id [topics]
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV2 => [brokers] cluster_id controller_id [topics]
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV3 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV4 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.


MetadataResponseV5 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.


MetadataResponseV6 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.


MetadataResponseV7 => throttle_time_ms [brokers] cluster_id controller_id [topics]
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions]
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.


MetadataResponseV8 => throttle_time_ms [brokers] cluster_id controller_id [topics] cluster_authorized_operations
  throttle_time_ms => INT32
  brokers => node_id host port rack
    node_id => INT32
    host => STRING
    port => INT32
    rack => NULLABLE_STRING
  cluster_id => NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal [partitions] topic_authorized_operations
    error_code => INT16
    name => STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch [replica_nodes] [isr_nodes] [offline_replicas]
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.


MetadataResponseV9 => throttle_time_ms {brokers} cluster_id controller_id {topics} cluster_authorized_operations TAG_BUFFER
  throttle_time_ms => INT32
  brokers => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_NULLABLE_STRING
  controller_id => INT32
  topics => error_code name is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_STRING
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.
# _tagged_fields: The tagged fields


MetadataResponseV10 => throttle_time_ms {brokers} cluster_id controller_id {topics} cluster_authorized_operations TAG_BUFFER
  throttle_time_ms => INT32
  brokers => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_NULLABLE_STRING
  controller_id => INT32
  topics => error_code name topic_id is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_STRING
    topic_id => UUID
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# topic_id: The topic id. Zero for non-existing topics queried by name. This is never zero when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.
# _tagged_fields: The tagged fields


MetadataResponseV11 => throttle_time_ms {brokers} cluster_id controller_id {topics} TAG_BUFFER
  throttle_time_ms => INT32
  brokers => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_NULLABLE_STRING
  controller_id => INT32
  topics => error_code name topic_id is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_STRING
    topic_id => UUID
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# topic_id: The topic id. Zero for non-existing topics queried by name. This is never zero when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


MetadataResponseV12 => throttle_time_ms {brokers} cluster_id controller_id {topics} TAG_BUFFER
  throttle_time_ms => INT32
  brokers => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_NULLABLE_STRING
  controller_id => INT32
  topics => error_code name topic_id is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_NULLABLE_STRING
    topic_id => UUID
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# topic_id: The topic id. Zero for non-existing topics queried by name. This is never zero when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


MetadataResponseV13 => throttle_time_ms {brokers} cluster_id controller_id {topics} error_code TAG_BUFFER
  throttle_time_ms => INT32
  brokers => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_NULLABLE_STRING
  controller_id => INT32
  topics => error_code name topic_id is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_NULLABLE_STRING
    topic_id => UUID
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# brokers: A list of brokers present in the cluster.
# node_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name. Null for non-existing topics queried by ID. This is never null when ErrorCode is zero. One of Name and TopicId is always populated.
# topic_id: The topic id. Zero for non-existing topics queried by name. This is never zero when ErrorCode is zero. One of Name and TopicId is always populated.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# error_code: The top-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: OffsetCommit, 8
OffsetCommitRequestV2 => group_id generation_id_or_member_epoch member_id retention_time_ms [topics]
  group_id => STRING
  generation_id_or_member_epoch => INT32
  member_id => STRING
  retention_time_ms => INT64
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# retention_time_ms: The time period in ms to retain the offset.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV3 => group_id generation_id_or_member_epoch member_id retention_time_ms [topics]
  group_id => STRING
  generation_id_or_member_epoch => INT32
  member_id => STRING
  retention_time_ms => INT64
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# retention_time_ms: The time period in ms to retain the offset.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV4 => group_id generation_id_or_member_epoch member_id retention_time_ms [topics]
  group_id => STRING
  generation_id_or_member_epoch => INT32
  member_id => STRING
  retention_time_ms => INT64
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# retention_time_ms: The time period in ms to retain the offset.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV5 => group_id generation_id_or_member_epoch member_id [topics]
  group_id => STRING
  generation_id_or_member_epoch => INT32
  member_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV6 => group_id generation_id_or_member_epoch member_id [topics]
  group_id => STRING
  generation_id_or_member_epoch => INT32
  member_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV7 => group_id generation_id_or_member_epoch member_id group_instance_id [topics]
  group_id => STRING
  generation_id_or_member_epoch => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.


OffsetCommitRequestV8 => group_id generation_id_or_member_epoch member_id group_instance_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id_or_member_epoch => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetCommitRequestV9 => group_id generation_id_or_member_epoch member_id group_instance_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id_or_member_epoch => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: The topics to commit offsets for.
# name: The topic name.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetCommitRequestV10 => group_id generation_id_or_member_epoch member_id group_instance_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id_or_member_epoch => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# group_id: The unique group identifier.
# generation_id_or_member_epoch: The generation of the group if using the classic group protocol or the member epoch if using the consumer protocol.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: The topics to commit offsets for.
# topic_id: The topic ID.
# partitions: Each partition to commit offsets for.
# partition_index: The partition index.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of this partition.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields






OffsetCommitResponseV2 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV4 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV5 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV6 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV7 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


OffsetCommitResponseV8 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetCommitResponseV9 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetCommitResponseV10 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# topic_id: The topic ID.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: OffsetFetch, 9
OffsetFetchRequestV1 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV2 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV3 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV4 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV5 => group_id [topics]
  group_id => STRING
  topics => name [partition_indexes]
    name => STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.


OffsetFetchRequestV6 => group_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  topics => name {partition_indexes} TAG_BUFFER
    name => COMPACT_STRING
    partition_indexes => INT32

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetFetchRequestV7 => group_id {topics} require_stable TAG_BUFFER
  group_id => COMPACT_STRING
  topics => name {partition_indexes} TAG_BUFFER
    name => COMPACT_STRING
    partition_indexes => INT32
  require_stable => BOOLEAN

# group_id: The group to fetch offsets for.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.
# _tagged_fields: The tagged fields
# require_stable: Whether broker should hold on returning unstable offsets but set a retriable error code for the partitions.
# _tagged_fields: The tagged fields


OffsetFetchRequestV8 => {groups} require_stable TAG_BUFFER
  groups => group_id {topics} TAG_BUFFER
    group_id => COMPACT_STRING
    topics => name {partition_indexes} TAG_BUFFER
      name => COMPACT_STRING
      partition_indexes => INT32
  require_stable => BOOLEAN

# groups: Each group we would like to fetch offsets for.
# group_id: The group ID.
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# require_stable: Whether broker should hold on returning unstable offsets but set a retriable error code for the partitions.
# _tagged_fields: The tagged fields


OffsetFetchRequestV9 => {groups} require_stable TAG_BUFFER
  groups => group_id member_id member_epoch {topics} TAG_BUFFER
    group_id => COMPACT_STRING
    member_id => COMPACT_NULLABLE_STRING
    member_epoch => INT32
    topics => name {partition_indexes} TAG_BUFFER
      name => COMPACT_STRING
      partition_indexes => INT32
  require_stable => BOOLEAN

# groups: Each group we would like to fetch offsets for.
# group_id: The group ID.
# member_id: The member id.
# member_epoch: The member epoch if using the new consumer protocol (KIP-848).
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# name: The topic name.
# partition_indexes: The partition indexes we would like to fetch offsets for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# require_stable: Whether broker should hold on returning unstable offsets but set a retriable error code for the partitions.
# _tagged_fields: The tagged fields


OffsetFetchRequestV10 => {groups} require_stable TAG_BUFFER
  groups => group_id member_id member_epoch {topics} TAG_BUFFER
    group_id => COMPACT_STRING
    member_id => COMPACT_NULLABLE_STRING
    member_epoch => INT32
    topics => topic_id {partition_indexes} TAG_BUFFER
      topic_id => UUID
      partition_indexes => INT32
  require_stable => BOOLEAN

# groups: Each group we would like to fetch offsets for.
# group_id: The group ID.
# member_id: The member id.
# member_epoch: The member epoch if using the new consumer protocol (KIP-848).
# topics: Each topic we would like to fetch offsets for, or null to fetch offsets for all topics.
# topic_id: The topic ID.
# partition_indexes: The partition indexes we would like to fetch offsets for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# require_stable: Whether broker should hold on returning unstable offsets but set a retriable error code for the partitions.
# _tagged_fields: The tagged fields




OffsetFetchResponseV1 => [topics]
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16

# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.


OffsetFetchResponseV2 => [topics] error_code
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV3 => throttle_time_ms [topics] error_code
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV4 => throttle_time_ms [topics] error_code
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset metadata error_code
      partition_index => INT32
      committed_offset => INT64
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV5 => throttle_time_ms [topics] error_code
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch metadata error_code
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      metadata => NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# error_code: The top-level error code, or 0 if there was no error.


OffsetFetchResponseV6 => throttle_time_ms {topics} error_code TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch metadata error_code TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      metadata => COMPACT_NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The top-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


OffsetFetchResponseV7 => throttle_time_ms {topics} error_code TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch metadata error_code TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      metadata => COMPACT_NULLABLE_STRING
      error_code => INT16
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The top-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


OffsetFetchResponseV8 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => group_id {topics} error_code TAG_BUFFER
    group_id => COMPACT_STRING
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => partition_index committed_offset committed_leader_epoch metadata error_code TAG_BUFFER
        partition_index => INT32
        committed_offset => INT64
        committed_leader_epoch => INT32
        metadata => COMPACT_NULLABLE_STRING
        error_code => INT16
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: The responses per group id.
# group_id: The group ID.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The partition-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The group-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetFetchResponseV9 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => group_id {topics} error_code TAG_BUFFER
    group_id => COMPACT_STRING
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => partition_index committed_offset committed_leader_epoch metadata error_code TAG_BUFFER
        partition_index => INT32
        committed_offset => INT64
        committed_leader_epoch => INT32
        metadata => COMPACT_NULLABLE_STRING
        error_code => INT16
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: The responses per group id.
# group_id: The group ID.
# topics: The responses per topic.
# name: The topic name.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The partition-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The group-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


OffsetFetchResponseV10 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => group_id {topics} error_code TAG_BUFFER
    group_id => COMPACT_STRING
    topics => topic_id {partitions} TAG_BUFFER
      topic_id => UUID
      partitions => partition_index committed_offset committed_leader_epoch metadata error_code TAG_BUFFER
        partition_index => INT32
        committed_offset => INT64
        committed_leader_epoch => INT32
        metadata => COMPACT_NULLABLE_STRING
        error_code => INT16
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: The responses per group id.
# group_id: The group ID.
# topics: The responses per topic.
# topic_id: The topic ID.
# partitions: The responses per partition.
# partition_index: The partition index.
# committed_offset: The committed message offset.
# committed_leader_epoch: The leader epoch.
# metadata: The partition metadata.
# error_code: The partition-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The group-level error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: FindCoordinator, 10
FindCoordinatorRequestV0 => key
  key => STRING

# key: The coordinator key.


FindCoordinatorRequestV1 => key key_type
  key => STRING
  key_type => INT8

# key: The coordinator key.
# key_type: The coordinator key type. (group, transaction, share).


FindCoordinatorRequestV2 => key key_type
  key => STRING
  key_type => INT8

# key: The coordinator key.
# key_type: The coordinator key type. (group, transaction, share).


FindCoordinatorRequestV3 => key key_type TAG_BUFFER
  key => COMPACT_STRING
  key_type => INT8

# key: The coordinator key.
# key_type: The coordinator key type. (group, transaction, share).
# _tagged_fields: The tagged fields


FindCoordinatorRequestV4 => key_type {coordinator_keys} TAG_BUFFER
  key_type => INT8
  coordinator_keys => COMPACT_STRING

# key_type: The coordinator key type. (group, transaction, share).
# coordinator_keys: The coordinator keys.
# _tagged_fields: The tagged fields


FindCoordinatorRequestV5 => key_type {coordinator_keys} TAG_BUFFER
  key_type => INT8
  coordinator_keys => COMPACT_STRING

# key_type: The coordinator key type. (group, transaction, share).
# coordinator_keys: The coordinator keys.
# _tagged_fields: The tagged fields


FindCoordinatorRequestV6 => key_type {coordinator_keys} TAG_BUFFER
  key_type => INT8
  coordinator_keys => COMPACT_STRING

# key_type: The coordinator key type. (group, transaction, share).
# coordinator_keys: The coordinator keys.
# _tagged_fields: The tagged fields


FindCoordinatorResponseV0 => error_code node_id host port
  error_code => INT16
  node_id => INT32
  host => STRING
  port => INT32

# error_code: The error code, or 0 if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.


FindCoordinatorResponseV1 => throttle_time_ms error_code error_message node_id host port
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  node_id => INT32
  host => STRING
  port => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.


FindCoordinatorResponseV2 => throttle_time_ms error_code error_message node_id host port
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  node_id => INT32
  host => STRING
  port => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.


FindCoordinatorResponseV3 => throttle_time_ms error_code error_message node_id host port TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  node_id => INT32
  host => COMPACT_STRING
  port => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# node_id: The node id.
# host: The host name.
# port: The port.
# _tagged_fields: The tagged fields


FindCoordinatorResponseV4 => throttle_time_ms {coordinators} TAG_BUFFER
  throttle_time_ms => INT32
  coordinators => key node_id host port error_code error_message TAG_BUFFER
    key => COMPACT_STRING
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# coordinators: Each coordinator result in the response.
# key: The coordinator key.
# node_id: The node id.
# host: The host name.
# port: The port.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FindCoordinatorResponseV5 => throttle_time_ms {coordinators} TAG_BUFFER
  throttle_time_ms => INT32
  coordinators => key node_id host port error_code error_message TAG_BUFFER
    key => COMPACT_STRING
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# coordinators: Each coordinator result in the response.
# key: The coordinator key.
# node_id: The node id.
# host: The host name.
# port: The port.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FindCoordinatorResponseV6 => throttle_time_ms {coordinators} TAG_BUFFER
  throttle_time_ms => INT32
  coordinators => key node_id host port error_code error_message TAG_BUFFER
    key => COMPACT_STRING
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# coordinators: Each coordinator result in the response.
# key: The coordinator key.
# node_id: The node id.
# host: The host name.
# port: The port.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: JoinGroup, 11
JoinGroupRequestV0 => group_id session_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV1 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV2 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV3 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV4 => group_id session_timeout_ms rebalance_timeout_ms member_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV5 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type [protocols]
  group_id => STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING
  protocol_type => STRING
  protocols => name metadata
    name => STRING
    metadata => BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.


JoinGroupRequestV6 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type {protocols} TAG_BUFFER
  group_id => COMPACT_STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  protocol_type => COMPACT_STRING
  protocols => name metadata TAG_BUFFER
    name => COMPACT_STRING
    metadata => COMPACT_BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


JoinGroupRequestV7 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type {protocols} TAG_BUFFER
  group_id => COMPACT_STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  protocol_type => COMPACT_STRING
  protocols => name metadata TAG_BUFFER
    name => COMPACT_STRING
    metadata => COMPACT_BYTES

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


JoinGroupRequestV8 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type {protocols} reason TAG_BUFFER
  group_id => COMPACT_STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  protocol_type => COMPACT_STRING
  protocols => name metadata TAG_BUFFER
    name => COMPACT_STRING
    metadata => COMPACT_BYTES
  reason => COMPACT_NULLABLE_STRING

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.
# _tagged_fields: The tagged fields
# reason: The reason why the member (re-)joins the group.
# _tagged_fields: The tagged fields


JoinGroupRequestV9 => group_id session_timeout_ms rebalance_timeout_ms member_id group_instance_id protocol_type {protocols} reason TAG_BUFFER
  group_id => COMPACT_STRING
  session_timeout_ms => INT32
  rebalance_timeout_ms => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  protocol_type => COMPACT_STRING
  protocols => name metadata TAG_BUFFER
    name => COMPACT_STRING
    metadata => COMPACT_BYTES
  reason => COMPACT_NULLABLE_STRING

# group_id: The group identifier.
# session_timeout_ms: The coordinator considers the consumer dead if it receives no heartbeat after this timeout in milliseconds.
# rebalance_timeout_ms: The maximum time in milliseconds that the coordinator will wait for each member to rejoin when rebalancing the group.
# member_id: The member id assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The unique name the for class of protocols implemented by the group we want to join.
# protocols: The list of protocols that the member supports.
# name: The protocol name.
# metadata: The protocol metadata.
# _tagged_fields: The tagged fields
# reason: The reason why the member (re-)joins the group.
# _tagged_fields: The tagged fields


JoinGroupResponseV0 => error_code generation_id protocol_name leader member_id [members]
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV1 => error_code generation_id protocol_name leader member_id [members]
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV2 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV3 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV4 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id metadata
    member_id => STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# metadata: The group member metadata.


JoinGroupResponseV5 => throttle_time_ms error_code generation_id protocol_name leader member_id [members]
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => STRING
  leader => STRING
  member_id => STRING
  members => member_id group_instance_id metadata
    member_id => STRING
    group_instance_id => NULLABLE_STRING
    metadata => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.


JoinGroupResponseV6 => throttle_time_ms error_code generation_id protocol_name leader member_id {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_name => COMPACT_STRING
  leader => COMPACT_STRING
  member_id => COMPACT_STRING
  members => member_id group_instance_id metadata TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    metadata => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


JoinGroupResponseV7 => throttle_time_ms error_code generation_id protocol_type protocol_name leader member_id {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_type => COMPACT_NULLABLE_STRING
  protocol_name => COMPACT_NULLABLE_STRING
  leader => COMPACT_STRING
  member_id => COMPACT_STRING
  members => member_id group_instance_id metadata TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    metadata => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_type: The group protocol name.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


JoinGroupResponseV8 => throttle_time_ms error_code generation_id protocol_type protocol_name leader member_id {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_type => COMPACT_NULLABLE_STRING
  protocol_name => COMPACT_NULLABLE_STRING
  leader => COMPACT_STRING
  member_id => COMPACT_STRING
  members => member_id group_instance_id metadata TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    metadata => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_type: The group protocol name.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


JoinGroupResponseV9 => throttle_time_ms error_code generation_id protocol_type protocol_name leader skip_assignment member_id {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  generation_id => INT32
  protocol_type => COMPACT_NULLABLE_STRING
  protocol_name => COMPACT_NULLABLE_STRING
  leader => COMPACT_STRING
  skip_assignment => BOOLEAN
  member_id => COMPACT_STRING
  members => member_id group_instance_id metadata TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    metadata => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# generation_id: The generation ID of the group.
# protocol_type: The group protocol name.
# protocol_name: The group protocol selected by the coordinator.
# leader: The leader of the group.
# skip_assignment: True if the leader must skip running the assignment.
# member_id: The member ID assigned by the group coordinator.
# members: The group members.
# member_id: The group member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# metadata: The group member metadata.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: Heartbeat, 12
HeartbeatRequestV0 => group_id generation_id member_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.


HeartbeatRequestV1 => group_id generation_id member_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.


HeartbeatRequestV2 => group_id generation_id member_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.


HeartbeatRequestV3 => group_id generation_id member_id group_instance_id
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.


HeartbeatRequestV4 => group_id generation_id member_id group_instance_id TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING

# group_id: The group id.
# generation_id: The generation of the group.
# member_id: The member ID.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# _tagged_fields: The tagged fields


HeartbeatResponseV0 => error_code
  error_code => INT16

# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV2 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV3 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


HeartbeatResponseV4 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: LeaveGroup, 13
LeaveGroupRequestV0 => group_id member_id
  group_id => STRING
  member_id => STRING

# group_id: The ID of the group to leave.
# member_id: The member ID to remove from the group.


LeaveGroupRequestV1 => group_id member_id
  group_id => STRING
  member_id => STRING

# group_id: The ID of the group to leave.
# member_id: The member ID to remove from the group.


LeaveGroupRequestV2 => group_id member_id
  group_id => STRING
  member_id => STRING

# group_id: The ID of the group to leave.
# member_id: The member ID to remove from the group.


LeaveGroupRequestV3 => group_id [members]
  group_id => STRING
  members => member_id group_instance_id
    member_id => STRING
    group_instance_id => NULLABLE_STRING

# group_id: The ID of the group to leave.
# members: List of leaving member identities.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.


LeaveGroupRequestV4 => group_id {members} TAG_BUFFER
  group_id => COMPACT_STRING
  members => member_id group_instance_id TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING

# group_id: The ID of the group to leave.
# members: List of leaving member identities.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


LeaveGroupRequestV5 => group_id {members} TAG_BUFFER
  group_id => COMPACT_STRING
  members => member_id group_instance_id reason TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    reason => COMPACT_NULLABLE_STRING

# group_id: The ID of the group to leave.
# members: List of leaving member identities.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# reason: The reason why the member left the group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


LeaveGroupResponseV0 => error_code
  error_code => INT16

# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV2 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV3 => throttle_time_ms error_code [members]
  throttle_time_ms => INT32
  error_code => INT16
  members => member_id group_instance_id error_code
    member_id => STRING
    group_instance_id => NULLABLE_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# members: List of leaving member responses.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# error_code: The error code, or 0 if there was no error.


LeaveGroupResponseV4 => throttle_time_ms error_code {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  members => member_id group_instance_id error_code TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# members: List of leaving member responses.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


LeaveGroupResponseV5 => throttle_time_ms error_code {members} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  members => member_id group_instance_id error_code TAG_BUFFER
    member_id => COMPACT_STRING
    group_instance_id => COMPACT_NULLABLE_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# members: List of leaving member responses.
# member_id: The member ID to remove from the group.
# group_instance_id: The group instance ID to remove from the group.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: SyncGroup, 14
SyncGroupRequestV0 => group_id generation_id member_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV1 => group_id generation_id member_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV2 => group_id generation_id member_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV3 => group_id generation_id member_id group_instance_id [assignments]
  group_id => STRING
  generation_id => INT32
  member_id => STRING
  group_instance_id => NULLABLE_STRING
  assignments => member_id assignment
    member_id => STRING
    assignment => BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.


SyncGroupRequestV4 => group_id generation_id member_id group_instance_id {assignments} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  assignments => member_id assignment TAG_BUFFER
    member_id => COMPACT_STRING
    assignment => COMPACT_BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


SyncGroupRequestV5 => group_id generation_id member_id group_instance_id protocol_type protocol_name {assignments} TAG_BUFFER
  group_id => COMPACT_STRING
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  protocol_type => COMPACT_NULLABLE_STRING
  protocol_name => COMPACT_NULLABLE_STRING
  assignments => member_id assignment TAG_BUFFER
    member_id => COMPACT_STRING
    assignment => COMPACT_BYTES

# group_id: The unique group identifier.
# generation_id: The generation of the group.
# member_id: The member ID assigned by the group.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# protocol_type: The group protocol type.
# protocol_name: The group protocol name.
# assignments: Each assignment.
# member_id: The ID of the member to assign.
# assignment: The member assignment.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


SyncGroupResponseV0 => error_code assignment
  error_code => INT16
  assignment => BYTES

# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV1 => throttle_time_ms error_code assignment
  throttle_time_ms => INT32
  error_code => INT16
  assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV2 => throttle_time_ms error_code assignment
  throttle_time_ms => INT32
  error_code => INT16
  assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV3 => throttle_time_ms error_code assignment
  throttle_time_ms => INT32
  error_code => INT16
  assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.


SyncGroupResponseV4 => throttle_time_ms error_code assignment TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  assignment => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# assignment: The member assignment.
# _tagged_fields: The tagged fields


SyncGroupResponseV5 => throttle_time_ms error_code protocol_type protocol_name assignment TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  protocol_type => COMPACT_NULLABLE_STRING
  protocol_name => COMPACT_NULLABLE_STRING
  assignment => COMPACT_BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# protocol_type: The group protocol type.
# protocol_name: The group protocol name.
# assignment: The member assignment.
# _tagged_fields: The tagged fields


#ApiKey: DescribeGroups, 15
DescribeGroupsRequestV0 => [groups]
  groups => STRING

# groups: The names of the groups to describe.


DescribeGroupsRequestV1 => [groups]
  groups => STRING

# groups: The names of the groups to describe.


DescribeGroupsRequestV2 => [groups]
  groups => STRING

# groups: The names of the groups to describe.


DescribeGroupsRequestV3 => [groups] include_authorized_operations
  groups => STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.


DescribeGroupsRequestV4 => [groups] include_authorized_operations
  groups => STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.


DescribeGroupsRequestV5 => {groups} include_authorized_operations TAG_BUFFER
  groups => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields


DescribeGroupsRequestV6 => {groups} include_authorized_operations TAG_BUFFER
  groups => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# groups: The names of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields


DescribeGroupsResponseV0 => [groups]
  groups => error_code group_id group_state protocol_type protocol_data [members]
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES

# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.


DescribeGroupsResponseV1 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members]
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.


DescribeGroupsResponseV2 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members]
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.


DescribeGroupsResponseV3 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members] authorized_operations
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id client_id client_host member_metadata member_assignment
      member_id => STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.


DescribeGroupsResponseV4 => throttle_time_ms [groups]
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data [members] authorized_operations
    error_code => INT16
    group_id => STRING
    group_state => STRING
    protocol_type => STRING
    protocol_data => STRING
    members => member_id group_instance_id client_id client_host member_metadata member_assignment
      member_id => STRING
      group_instance_id => NULLABLE_STRING
      client_id => STRING
      client_host => STRING
      member_metadata => BYTES
      member_assignment => BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.


DescribeGroupsResponseV5 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code group_id group_state protocol_type protocol_data {members} authorized_operations TAG_BUFFER
    error_code => INT16
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    protocol_type => COMPACT_STRING
    protocol_data => COMPACT_STRING
    members => member_id group_instance_id client_id client_host member_metadata member_assignment TAG_BUFFER
      member_id => COMPACT_STRING
      group_instance_id => COMPACT_NULLABLE_STRING
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      member_metadata => COMPACT_BYTES
      member_assignment => COMPACT_BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeGroupsResponseV6 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code error_message group_id group_state protocol_type protocol_data {members} authorized_operations TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    protocol_type => COMPACT_STRING
    protocol_data => COMPACT_STRING
    members => member_id group_instance_id client_id client_host member_metadata member_assignment TAG_BUFFER
      member_id => COMPACT_STRING
      group_instance_id => COMPACT_NULLABLE_STRING
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      member_metadata => COMPACT_BYTES
      member_assignment => COMPACT_BYTES
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# error_message: The describe error message, or null if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# protocol_type: The group protocol type, or the empty string.
# protocol_data: The group protocol data, or the empty string.
# members: The group members.
# member_id: The member id.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# client_id: The client ID used in the member's latest join group request.
# client_host: The client host.
# member_metadata: The metadata corresponding to the current group protocol in use.
# member_assignment: The current assignment provided by the group leader.
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListGroups, 16
ListGroupsRequestV0 => 



ListGroupsRequestV1 => 



ListGroupsRequestV2 => 



ListGroupsRequestV3 => TAG_BUFFER

# _tagged_fields: The tagged fields


ListGroupsRequestV4 => {states_filter} TAG_BUFFER
  states_filter => COMPACT_STRING

# states_filter: The states of the groups we want to list. If empty, all groups are returned with their state.
# _tagged_fields: The tagged fields


ListGroupsRequestV5 => {states_filter} {types_filter} TAG_BUFFER
  states_filter => COMPACT_STRING
  types_filter => COMPACT_STRING

# states_filter: The states of the groups we want to list. If empty, all groups are returned with their state.
# types_filter: The types of the groups we want to list. If empty, all groups are returned with their type.
# _tagged_fields: The tagged fields


ListGroupsResponseV0 => error_code [groups]
  error_code => INT16
  groups => group_id protocol_type
    group_id => STRING
    protocol_type => STRING

# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.


ListGroupsResponseV1 => throttle_time_ms error_code [groups]
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type
    group_id => STRING
    protocol_type => STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.


ListGroupsResponseV2 => throttle_time_ms error_code [groups]
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type
    group_id => STRING
    protocol_type => STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.


ListGroupsResponseV3 => throttle_time_ms error_code {groups} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type TAG_BUFFER
    group_id => COMPACT_STRING
    protocol_type => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListGroupsResponseV4 => throttle_time_ms error_code {groups} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type group_state TAG_BUFFER
    group_id => COMPACT_STRING
    protocol_type => COMPACT_STRING
    group_state => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.
# group_state: The group state name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListGroupsResponseV5 => throttle_time_ms error_code {groups} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  groups => group_id protocol_type group_state group_type TAG_BUFFER
    group_id => COMPACT_STRING
    protocol_type => COMPACT_STRING
    group_state => COMPACT_STRING
    group_type => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# groups: Each group in the response.
# group_id: The group ID.
# protocol_type: The group protocol type.
# group_state: The group state name.
# group_type: The group type name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: SaslHandshake, 17
SaslHandshakeRequestV0 => mechanism
  mechanism => STRING

# mechanism: The SASL mechanism chosen by the client.


SaslHandshakeRequestV1 => mechanism
  mechanism => STRING

# mechanism: The SASL mechanism chosen by the client.


SaslHandshakeResponseV0 => error_code [mechanisms]
  error_code => INT16
  mechanisms => STRING

# error_code: The error code, or 0 if there was no error.
# mechanisms: The mechanisms enabled in the server.


SaslHandshakeResponseV1 => error_code [mechanisms]
  error_code => INT16
  mechanisms => STRING

# error_code: The error code, or 0 if there was no error.
# mechanisms: The mechanisms enabled in the server.


#ApiKey: ApiVersions, 18
ApiVersionsRequestV0 => 



ApiVersionsRequestV1 => 



ApiVersionsRequestV2 => 



ApiVersionsRequestV3 => client_software_name client_software_version TAG_BUFFER
  client_software_name => COMPACT_STRING
  client_software_version => COMPACT_STRING

# client_software_name: The name of the client.
# client_software_version: The version of the client.
# _tagged_fields: The tagged fields


ApiVersionsRequestV4 => client_software_name client_software_version TAG_BUFFER
  client_software_name => COMPACT_STRING
  client_software_version => COMPACT_STRING

# client_software_name: The name of the client.
# client_software_version: The version of the client.
# _tagged_fields: The tagged fields


ApiVersionsResponseV0 => error_code [api_keys]
  error_code => INT16
  api_keys => api_key min_version max_version
    api_key => INT16
    min_version => INT16
    max_version => INT16

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.


ApiVersionsResponseV1 => error_code [api_keys] throttle_time_ms
  error_code => INT16
  api_keys => api_key min_version max_version
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ApiVersionsResponseV2 => error_code [api_keys] throttle_time_ms
  error_code => INT16
  api_keys => api_key min_version max_version
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ApiVersionsResponseV3 => error_code {api_keys} throttle_time_ms TAG_BUFFER
  error_code => INT16
  api_keys => api_key min_version max_version TAG_BUFFER
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


ApiVersionsResponseV4 => error_code {api_keys} throttle_time_ms TAG_BUFFER
  error_code => INT16
  api_keys => api_key min_version max_version TAG_BUFFER
    api_key => INT16
    min_version => INT16
    max_version => INT16
  throttle_time_ms => INT32

# error_code: The top-level error code.
# api_keys: The APIs supported by the broker.
# api_key: The API index.
# min_version: The minimum supported version, inclusive.
# max_version: The maximum supported version, inclusive.
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: CreateTopics, 19
CreateTopicsRequestV2 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV3 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV4 => [topics] timeout_ms validate_only
  topics => name num_partitions replication_factor [assignments] [configs]
    name => STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index [broker_ids]
      partition_index => INT32
      broker_ids => INT32
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.


CreateTopicsRequestV5 => {topics} timeout_ms validate_only TAG_BUFFER
  topics => name num_partitions replication_factor {assignments} {configs} TAG_BUFFER
    name => COMPACT_STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index {broker_ids} TAG_BUFFER
      partition_index => INT32
      broker_ids => INT32
    configs => name value TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# _tagged_fields: The tagged fields
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.
# _tagged_fields: The tagged fields


CreateTopicsRequestV6 => {topics} timeout_ms validate_only TAG_BUFFER
  topics => name num_partitions replication_factor {assignments} {configs} TAG_BUFFER
    name => COMPACT_STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index {broker_ids} TAG_BUFFER
      partition_index => INT32
      broker_ids => INT32
    configs => name value TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# _tagged_fields: The tagged fields
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.
# _tagged_fields: The tagged fields


CreateTopicsRequestV7 => {topics} timeout_ms validate_only TAG_BUFFER
  topics => name num_partitions replication_factor {assignments} {configs} TAG_BUFFER
    name => COMPACT_STRING
    num_partitions => INT32
    replication_factor => INT16
    assignments => partition_index {broker_ids} TAG_BUFFER
      partition_index => INT32
      broker_ids => INT32
    configs => name value TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: The topics to create.
# name: The topic name.
# num_partitions: The number of partitions to create in the topic, or -1 if we are either specifying a manual partition assignment or using the default partitions.
# replication_factor: The number of replicas to create for each partition in the topic, or -1 if we are either specifying a manual partition assignment or using the default replication factor.
# assignments: The manual partition assignment, or the empty array if we are using automatic assignment.
# partition_index: The partition index.
# broker_ids: The brokers to place the partition on.
# _tagged_fields: The tagged fields
# configs: The custom topic configurations to set.
# name: The configuration name.
# value: The configuration value.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: How long to wait in milliseconds before timing out the request.
# validate_only: If true, check that the topics can be created as specified, but don't create anything.
# _tagged_fields: The tagged fields






CreateTopicsResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV4 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.


CreateTopicsResponseV5 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name error_code error_message num_partitions replication_factor {configs} TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    num_partitions => INT32
    replication_factor => INT16
    configs => name value read_only config_source is_sensitive TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# num_partitions: Number of partitions of the topic.
# replication_factor: Replication factor of the topic.
# configs: Configuration of the topic.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


CreateTopicsResponseV6 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name error_code error_message num_partitions replication_factor {configs} TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    num_partitions => INT32
    replication_factor => INT16
    configs => name value read_only config_source is_sensitive TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# num_partitions: Number of partitions of the topic.
# replication_factor: Replication factor of the topic.
# configs: Configuration of the topic.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


CreateTopicsResponseV7 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name topic_id error_code error_message num_partitions replication_factor {configs} TAG_BUFFER
    name => COMPACT_STRING
    topic_id => UUID
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    num_partitions => INT32
    replication_factor => INT16
    configs => name value read_only config_source is_sensitive TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Results for each topic we tried to create.
# name: The topic name.
# topic_id: The unique topic ID.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# num_partitions: Number of partitions of the topic.
# replication_factor: Replication factor of the topic.
# configs: Configuration of the topic.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DeleteTopics, 20
DeleteTopicsRequestV1 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete.
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV2 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete.
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV3 => [topic_names] timeout_ms
  topic_names => STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete.
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.


DeleteTopicsRequestV4 => {topic_names} timeout_ms TAG_BUFFER
  topic_names => COMPACT_STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete.
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.
# _tagged_fields: The tagged fields


DeleteTopicsRequestV5 => {topic_names} timeout_ms TAG_BUFFER
  topic_names => COMPACT_STRING
  timeout_ms => INT32

# topic_names: The names of the topics to delete.
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.
# _tagged_fields: The tagged fields


DeleteTopicsRequestV6 => {topics} timeout_ms TAG_BUFFER
  topics => name topic_id TAG_BUFFER
    name => COMPACT_NULLABLE_STRING
    topic_id => UUID
  timeout_ms => INT32

# topics: The name or topic ID of the topic.
# name: The topic name.
# topic_id: The unique topic ID.
# _tagged_fields: The tagged fields
# timeout_ms: The length of time in milliseconds to wait for the deletions to complete.
# _tagged_fields: The tagged fields




DeleteTopicsResponseV1 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => name error_code
    name => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name.
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV2 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => name error_code
    name => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name.
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV3 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => name error_code
    name => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name.
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteTopicsResponseV4 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => name error_code TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name.
# error_code: The deletion error, or 0 if the deletion succeeded.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DeleteTopicsResponseV5 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => name error_code error_message TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name.
# error_code: The deletion error, or 0 if the deletion succeeded.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DeleteTopicsResponseV6 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => name topic_id error_code error_message TAG_BUFFER
    name => COMPACT_NULLABLE_STRING
    topic_id => UUID
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The results for each topic we tried to delete.
# name: The topic name.
# topic_id: The unique topic ID.
# error_code: The deletion error, or 0 if the deletion succeeded.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DeleteRecords, 21
DeleteRecordsRequestV0 => [topics] timeout_ms
  topics => name [partitions]
    name => STRING
    partitions => partition_index offset
      partition_index => INT32
      offset => INT64
  timeout_ms => INT32

# topics: Each topic that we want to delete records from.
# name: The topic name.
# partitions: Each partition that we want to delete records from.
# partition_index: The partition index.
# offset: The deletion offset.
# timeout_ms: How long to wait for the deletion to complete, in milliseconds.


DeleteRecordsRequestV1 => [topics] timeout_ms
  topics => name [partitions]
    name => STRING
    partitions => partition_index offset
      partition_index => INT32
      offset => INT64
  timeout_ms => INT32

# topics: Each topic that we want to delete records from.
# name: The topic name.
# partitions: Each partition that we want to delete records from.
# partition_index: The partition index.
# offset: The deletion offset.
# timeout_ms: How long to wait for the deletion to complete, in milliseconds.


DeleteRecordsRequestV2 => {topics} timeout_ms TAG_BUFFER
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index offset TAG_BUFFER
      partition_index => INT32
      offset => INT64
  timeout_ms => INT32

# topics: Each topic that we want to delete records from.
# name: The topic name.
# partitions: Each partition that we want to delete records from.
# partition_index: The partition index.
# offset: The deletion offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: How long to wait for the deletion to complete, in milliseconds.
# _tagged_fields: The tagged fields


DeleteRecordsResponseV0 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index low_watermark error_code
      partition_index => INT32
      low_watermark => INT64
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic that we wanted to delete records from.
# name: The topic name.
# partitions: Each partition that we wanted to delete records from.
# partition_index: The partition index.
# low_watermark: The partition low water mark.
# error_code: The deletion error code, or 0 if the deletion succeeded.


DeleteRecordsResponseV1 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index low_watermark error_code
      partition_index => INT32
      low_watermark => INT64
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic that we wanted to delete records from.
# name: The topic name.
# partitions: Each partition that we wanted to delete records from.
# partition_index: The partition index.
# low_watermark: The partition low water mark.
# error_code: The deletion error code, or 0 if the deletion succeeded.


DeleteRecordsResponseV2 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index low_watermark error_code TAG_BUFFER
      partition_index => INT32
      low_watermark => INT64
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic that we wanted to delete records from.
# name: The topic name.
# partitions: Each partition that we wanted to delete records from.
# partition_index: The partition index.
# low_watermark: The partition low water mark.
# error_code: The deletion error code, or 0 if the deletion succeeded.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: InitProducerId, 22
InitProducerIdRequestV0 => transactional_id transaction_timeout_ms
  transactional_id => NULLABLE_STRING
  transaction_timeout_ms => INT32

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.


InitProducerIdRequestV1 => transactional_id transaction_timeout_ms
  transactional_id => NULLABLE_STRING
  transaction_timeout_ms => INT32

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.


InitProducerIdRequestV2 => transactional_id transaction_timeout_ms TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  transaction_timeout_ms => INT32

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.
# _tagged_fields: The tagged fields


InitProducerIdRequestV3 => transactional_id transaction_timeout_ms producer_id producer_epoch TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  transaction_timeout_ms => INT32
  producer_id => INT64
  producer_epoch => INT16

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.
# producer_id: The producer id. This is used to disambiguate requests if a transactional id is reused following its expiration.
# producer_epoch: The producer's current epoch. This will be checked against the producer epoch on the broker, and the request will return an error if they do not match.
# _tagged_fields: The tagged fields


InitProducerIdRequestV4 => transactional_id transaction_timeout_ms producer_id producer_epoch TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  transaction_timeout_ms => INT32
  producer_id => INT64
  producer_epoch => INT16

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.
# producer_id: The producer id. This is used to disambiguate requests if a transactional id is reused following its expiration.
# producer_epoch: The producer's current epoch. This will be checked against the producer epoch on the broker, and the request will return an error if they do not match.
# _tagged_fields: The tagged fields


InitProducerIdRequestV5 => transactional_id transaction_timeout_ms producer_id producer_epoch TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  transaction_timeout_ms => INT32
  producer_id => INT64
  producer_epoch => INT16

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.
# producer_id: The producer id. This is used to disambiguate requests if a transactional id is reused following its expiration.
# producer_epoch: The producer's current epoch. This will be checked against the producer epoch on the broker, and the request will return an error if they do not match.
# _tagged_fields: The tagged fields


InitProducerIdRequestV6 => transactional_id transaction_timeout_ms producer_id producer_epoch enable2_pc keep_prepared_txn TAG_BUFFER
  transactional_id => COMPACT_NULLABLE_STRING
  transaction_timeout_ms => INT32
  producer_id => INT64
  producer_epoch => INT16
  enable2_pc => BOOLEAN
  keep_prepared_txn => BOOLEAN

# transactional_id: The transactional id, or null if the producer is not transactional.
# transaction_timeout_ms: The time in ms to wait before aborting idle transactions sent by this producer. This is only relevant if a TransactionalId has been defined.
# producer_id: The producer id. This is used to disambiguate requests if a transactional id is reused following its expiration.
# producer_epoch: The producer's current epoch. This will be checked against the producer epoch on the broker, and the request will return an error if they do not match.
# enable2_pc: True if the client wants to enable two-phase commit (2PC) protocol for transactions.
# keep_prepared_txn: True if the client wants to keep the currently ongoing transaction instead of aborting it.
# _tagged_fields: The tagged fields


InitProducerIdResponseV0 => throttle_time_ms error_code producer_id producer_epoch
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.


InitProducerIdResponseV1 => throttle_time_ms error_code producer_id producer_epoch
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.


InitProducerIdResponseV2 => throttle_time_ms error_code producer_id producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.
# _tagged_fields: The tagged fields


InitProducerIdResponseV3 => throttle_time_ms error_code producer_id producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.
# _tagged_fields: The tagged fields


InitProducerIdResponseV4 => throttle_time_ms error_code producer_id producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.
# _tagged_fields: The tagged fields


InitProducerIdResponseV5 => throttle_time_ms error_code producer_id producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.
# _tagged_fields: The tagged fields


InitProducerIdResponseV6 => throttle_time_ms error_code producer_id producer_epoch ongoing_txn_producer_id ongoing_txn_producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16
  ongoing_txn_producer_id => INT64
  ongoing_txn_producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The current producer id.
# producer_epoch: The current epoch associated with the producer id.
# ongoing_txn_producer_id: The producer id for ongoing transaction when KeepPreparedTxn is used, -1 if there is no transaction ongoing.
# ongoing_txn_producer_epoch: The epoch associated with the  producer id for ongoing transaction when KeepPreparedTxn is used, -1 if there is no transaction ongoing.
# _tagged_fields: The tagged fields


#ApiKey: OffsetForLeaderEpoch, 23
OffsetForLeaderEpochRequestV2 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch leader_epoch
      partition => INT32
      current_leader_epoch => INT32
      leader_epoch => INT32

# topics: Each topic to get offsets for.
# topic: The topic name.
# partitions: Each partition to get offsets for.
# partition: The partition index.
# current_leader_epoch: An epoch used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# leader_epoch: The epoch to look up an offset for.


OffsetForLeaderEpochRequestV3 => replica_id [topics]
  replica_id => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => partition current_leader_epoch leader_epoch
      partition => INT32
      current_leader_epoch => INT32
      leader_epoch => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# topics: Each topic to get offsets for.
# topic: The topic name.
# partitions: Each partition to get offsets for.
# partition: The partition index.
# current_leader_epoch: An epoch used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# leader_epoch: The epoch to look up an offset for.


OffsetForLeaderEpochRequestV4 => replica_id {topics} TAG_BUFFER
  replica_id => INT32
  topics => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => partition current_leader_epoch leader_epoch TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      leader_epoch => INT32

# replica_id: The broker ID of the follower, of -1 if this request is from a consumer.
# topics: Each topic to get offsets for.
# topic: The topic name.
# partitions: Each partition to get offsets for.
# partition: The partition index.
# current_leader_epoch: An epoch used to fence consumers/replicas with old metadata. If the epoch provided by the client is larger than the current epoch known to the broker, then the UNKNOWN_LEADER_EPOCH error code will be returned. If the provided epoch is smaller, then the FENCED_LEADER_EPOCH error code will be returned.
# leader_epoch: The epoch to look up an offset for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields






OffsetForLeaderEpochResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => error_code partition leader_epoch end_offset
      error_code => INT16
      partition => INT32
      leader_epoch => INT32
      end_offset => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic we fetched offsets for.
# topic: The topic name.
# partitions: Each partition in the topic we fetched offsets for.
# error_code: The error code 0, or if there was no error.
# partition: The partition index.
# leader_epoch: The leader epoch of the partition.
# end_offset: The end offset of the epoch.


OffsetForLeaderEpochResponseV3 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => topic [partitions]
    topic => STRING
    partitions => error_code partition leader_epoch end_offset
      error_code => INT16
      partition => INT32
      leader_epoch => INT32
      end_offset => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic we fetched offsets for.
# topic: The topic name.
# partitions: Each partition in the topic we fetched offsets for.
# error_code: The error code 0, or if there was no error.
# partition: The partition index.
# leader_epoch: The leader epoch of the partition.
# end_offset: The end offset of the epoch.


OffsetForLeaderEpochResponseV4 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => error_code partition leader_epoch end_offset TAG_BUFFER
      error_code => INT16
      partition => INT32
      leader_epoch => INT32
      end_offset => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic we fetched offsets for.
# topic: The topic name.
# partitions: Each partition in the topic we fetched offsets for.
# error_code: The error code 0, or if there was no error.
# partition: The partition index.
# leader_epoch: The leader epoch of the partition.
# end_offset: The end offset of the epoch.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AddPartitionsToTxn, 24
AddPartitionsToTxnRequestV0 => transactional_id producer_id producer_epoch [topics]
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => INT32

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# topics: The partitions to add to the transaction.
# name: The name of the topic.
# partitions: The partition indexes to add to the transaction.


AddPartitionsToTxnRequestV1 => transactional_id producer_id producer_epoch [topics]
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => INT32

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# topics: The partitions to add to the transaction.
# name: The name of the topic.
# partitions: The partition indexes to add to the transaction.


AddPartitionsToTxnRequestV2 => transactional_id producer_id producer_epoch [topics]
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => INT32

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# topics: The partitions to add to the transaction.
# name: The name of the topic.
# partitions: The partition indexes to add to the transaction.


AddPartitionsToTxnRequestV3 => transactional_id producer_id producer_epoch {topics} TAG_BUFFER
  transactional_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => INT32

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# topics: The partitions to add to the transaction.
# name: The name of the topic.
# partitions: The partition indexes to add to the transaction.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AddPartitionsToTxnRequestV4 => {transactions} TAG_BUFFER
  transactions => transactional_id producer_id producer_epoch verify_only {topics} TAG_BUFFER
    transactional_id => COMPACT_STRING
    producer_id => INT64
    producer_epoch => INT16
    verify_only => BOOLEAN
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => INT32

# transactions: List of transactions to add partitions to.
# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# verify_only: Boolean to signify if we want to check if the partition is in the transaction rather than add it.
# topics: The partitions to add to the transaction.
# name: The name of the topic.
# partitions: The partition indexes to add to the transaction.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AddPartitionsToTxnRequestV5 => {transactions} TAG_BUFFER
  transactions => transactional_id producer_id producer_epoch verify_only {topics} TAG_BUFFER
    transactional_id => COMPACT_STRING
    producer_id => INT64
    producer_epoch => INT16
    verify_only => BOOLEAN
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => INT32

# transactions: List of transactions to add partitions to.
# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# verify_only: Boolean to signify if we want to check if the partition is in the transaction rather than add it.
# topics: The partitions to add to the transaction.
# name: The name of the topic.
# partitions: The partition indexes to add to the transaction.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AddPartitionsToTxnResponseV0 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => name [results_by_partition]
    name => STRING
    results_by_partition => partition_index partition_error_code
      partition_index => INT32
      partition_error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each topic.
# name: The topic name.
# results_by_partition: The results for each partition.
# partition_index: The partition indexes.
# partition_error_code: The response error code.


AddPartitionsToTxnResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => name [results_by_partition]
    name => STRING
    results_by_partition => partition_index partition_error_code
      partition_index => INT32
      partition_error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each topic.
# name: The topic name.
# results_by_partition: The results for each partition.
# partition_index: The partition indexes.
# partition_error_code: The response error code.


AddPartitionsToTxnResponseV2 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => name [results_by_partition]
    name => STRING
    results_by_partition => partition_index partition_error_code
      partition_index => INT32
      partition_error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each topic.
# name: The topic name.
# results_by_partition: The results for each partition.
# partition_index: The partition indexes.
# partition_error_code: The response error code.


AddPartitionsToTxnResponseV3 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => name {results_by_partition} TAG_BUFFER
    name => COMPACT_STRING
    results_by_partition => partition_index partition_error_code TAG_BUFFER
      partition_index => INT32
      partition_error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each topic.
# name: The topic name.
# results_by_partition: The results for each partition.
# partition_index: The partition indexes.
# partition_error_code: The response error code.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AddPartitionsToTxnResponseV4 => throttle_time_ms error_code {results_by_transaction} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  results_by_transaction => transactional_id {topic_results} TAG_BUFFER
    transactional_id => COMPACT_STRING
    topic_results => name {results_by_partition} TAG_BUFFER
      name => COMPACT_STRING
      results_by_partition => partition_index partition_error_code TAG_BUFFER
        partition_index => INT32
        partition_error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response top level error code.
# results_by_transaction: Results categorized by transactional ID.
# transactional_id: The transactional id corresponding to the transaction.
# topic_results: The results for each topic.
# name: The topic name.
# results_by_partition: The results for each partition.
# partition_index: The partition indexes.
# partition_error_code: The response error code.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AddPartitionsToTxnResponseV5 => throttle_time_ms error_code {results_by_transaction} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  results_by_transaction => transactional_id {topic_results} TAG_BUFFER
    transactional_id => COMPACT_STRING
    topic_results => name {results_by_partition} TAG_BUFFER
      name => COMPACT_STRING
      results_by_partition => partition_index partition_error_code TAG_BUFFER
        partition_index => INT32
        partition_error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response top level error code.
# results_by_transaction: Results categorized by transactional ID.
# transactional_id: The transactional id corresponding to the transaction.
# topic_results: The results for each topic.
# name: The topic name.
# results_by_partition: The results for each partition.
# partition_index: The partition indexes.
# partition_error_code: The response error code.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AddOffsetsToTxn, 25
AddOffsetsToTxnRequestV0 => transactional_id producer_id producer_epoch group_id
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier.


AddOffsetsToTxnRequestV1 => transactional_id producer_id producer_epoch group_id
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier.


AddOffsetsToTxnRequestV2 => transactional_id producer_id producer_epoch group_id
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier.


AddOffsetsToTxnRequestV3 => transactional_id producer_id producer_epoch group_id TAG_BUFFER
  transactional_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => COMPACT_STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier.
# _tagged_fields: The tagged fields


AddOffsetsToTxnRequestV4 => transactional_id producer_id producer_epoch group_id TAG_BUFFER
  transactional_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  group_id => COMPACT_STRING

# transactional_id: The transactional id corresponding to the transaction.
# producer_id: Current producer id in use by the transactional id.
# producer_epoch: Current epoch associated with the producer id.
# group_id: The unique group identifier.
# _tagged_fields: The tagged fields


AddOffsetsToTxnResponseV0 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response error code, or 0 if there was no error.


AddOffsetsToTxnResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response error code, or 0 if there was no error.


AddOffsetsToTxnResponseV2 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response error code, or 0 if there was no error.


AddOffsetsToTxnResponseV3 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


AddOffsetsToTxnResponseV4 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: EndTxn, 26
EndTxnRequestV0 => transactional_id producer_id producer_epoch committed
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  committed => BOOLEAN

# transactional_id: The ID of the transaction to end.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# committed: True if the transaction was committed, false if it was aborted.


EndTxnRequestV1 => transactional_id producer_id producer_epoch committed
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  committed => BOOLEAN

# transactional_id: The ID of the transaction to end.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# committed: True if the transaction was committed, false if it was aborted.


EndTxnRequestV2 => transactional_id producer_id producer_epoch committed
  transactional_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  committed => BOOLEAN

# transactional_id: The ID of the transaction to end.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# committed: True if the transaction was committed, false if it was aborted.


EndTxnRequestV3 => transactional_id producer_id producer_epoch committed TAG_BUFFER
  transactional_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  committed => BOOLEAN

# transactional_id: The ID of the transaction to end.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# committed: True if the transaction was committed, false if it was aborted.
# _tagged_fields: The tagged fields


EndTxnRequestV4 => transactional_id producer_id producer_epoch committed TAG_BUFFER
  transactional_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  committed => BOOLEAN

# transactional_id: The ID of the transaction to end.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# committed: True if the transaction was committed, false if it was aborted.
# _tagged_fields: The tagged fields


EndTxnRequestV5 => transactional_id producer_id producer_epoch committed TAG_BUFFER
  transactional_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  committed => BOOLEAN

# transactional_id: The ID of the transaction to end.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# committed: True if the transaction was committed, false if it was aborted.
# _tagged_fields: The tagged fields


EndTxnResponseV0 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


EndTxnResponseV1 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


EndTxnResponseV2 => throttle_time_ms error_code
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.


EndTxnResponseV3 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


EndTxnResponseV4 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


EndTxnResponseV5 => throttle_time_ms error_code producer_id producer_epoch TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  producer_id => INT64
  producer_epoch => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# producer_id: The producer ID.
# producer_epoch: The current epoch associated with the producer.
# _tagged_fields: The tagged fields


#ApiKey: TxnOffsetCommit, 28
TxnOffsetCommitRequestV0 => transactional_id group_id producer_id producer_epoch [topics]
  transactional_id => STRING
  group_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


TxnOffsetCommitRequestV1 => transactional_id group_id producer_id producer_epoch [topics]
  transactional_id => STRING
  group_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_metadata => NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_metadata: Any associated metadata the client wants to keep.


TxnOffsetCommitRequestV2 => transactional_id group_id producer_id producer_epoch [topics]
  transactional_id => STRING
  group_id => STRING
  producer_id => INT64
  producer_epoch => INT16
  topics => name [partitions]
    name => STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of the last consumed record.
# committed_metadata: Any associated metadata the client wants to keep.


TxnOffsetCommitRequestV3 => transactional_id group_id producer_id producer_epoch generation_id member_id group_instance_id {topics} TAG_BUFFER
  transactional_id => COMPACT_STRING
  group_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# generation_id: The generation of the consumer.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of the last consumed record.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


TxnOffsetCommitRequestV4 => transactional_id group_id producer_id producer_epoch generation_id member_id group_instance_id {topics} TAG_BUFFER
  transactional_id => COMPACT_STRING
  group_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# generation_id: The generation of the consumer.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of the last consumed record.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


TxnOffsetCommitRequestV5 => transactional_id group_id producer_id producer_epoch generation_id member_id group_instance_id {topics} TAG_BUFFER
  transactional_id => COMPACT_STRING
  group_id => COMPACT_STRING
  producer_id => INT64
  producer_epoch => INT16
  generation_id => INT32
  member_id => COMPACT_STRING
  group_instance_id => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index committed_offset committed_leader_epoch committed_metadata TAG_BUFFER
      partition_index => INT32
      committed_offset => INT64
      committed_leader_epoch => INT32
      committed_metadata => COMPACT_NULLABLE_STRING

# transactional_id: The ID of the transaction.
# group_id: The ID of the group.
# producer_id: The current producer ID in use by the transactional ID.
# producer_epoch: The current epoch associated with the producer ID.
# generation_id: The generation of the consumer.
# member_id: The member ID assigned by the group coordinator.
# group_instance_id: The unique identifier of the consumer instance provided by end user.
# topics: Each topic that we want to commit offsets for.
# name: The topic name.
# partitions: The partitions inside the topic that we want to commit offsets for.
# partition_index: The index of the partition within the topic.
# committed_offset: The message offset to be committed.
# committed_leader_epoch: The leader epoch of the last consumed record.
# committed_metadata: Any associated metadata the client wants to keep.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


TxnOffsetCommitResponseV0 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


TxnOffsetCommitResponseV1 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


TxnOffsetCommitResponseV2 => throttle_time_ms [topics]
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


TxnOffsetCommitResponseV3 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


TxnOffsetCommitResponseV4 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


TxnOffsetCommitResponseV5 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeAcls, 29
DescribeAclsRequestV1 => resource_type_filter resource_name_filter pattern_type_filter principal_filter host_filter operation permission_type
  resource_type_filter => INT8
  resource_name_filter => NULLABLE_STRING
  pattern_type_filter => INT8
  principal_filter => NULLABLE_STRING
  host_filter => NULLABLE_STRING
  operation => INT8
  permission_type => INT8

# resource_type_filter: The resource type.
# resource_name_filter: The resource name, or null to match any resource name.
# pattern_type_filter: The resource pattern to match.
# principal_filter: The principal to match, or null to match any principal.
# host_filter: The host to match, or null to match any host.
# operation: The operation to match.
# permission_type: The permission type to match.


DescribeAclsRequestV2 => resource_type_filter resource_name_filter pattern_type_filter principal_filter host_filter operation permission_type TAG_BUFFER
  resource_type_filter => INT8
  resource_name_filter => COMPACT_NULLABLE_STRING
  pattern_type_filter => INT8
  principal_filter => COMPACT_NULLABLE_STRING
  host_filter => COMPACT_NULLABLE_STRING
  operation => INT8
  permission_type => INT8

# resource_type_filter: The resource type.
# resource_name_filter: The resource name, or null to match any resource name.
# pattern_type_filter: The resource pattern to match.
# principal_filter: The principal to match, or null to match any principal.
# host_filter: The host to match, or null to match any host.
# operation: The operation to match.
# permission_type: The permission type to match.
# _tagged_fields: The tagged fields


DescribeAclsRequestV3 => resource_type_filter resource_name_filter pattern_type_filter principal_filter host_filter operation permission_type TAG_BUFFER
  resource_type_filter => INT8
  resource_name_filter => COMPACT_NULLABLE_STRING
  pattern_type_filter => INT8
  principal_filter => COMPACT_NULLABLE_STRING
  host_filter => COMPACT_NULLABLE_STRING
  operation => INT8
  permission_type => INT8

# resource_type_filter: The resource type.
# resource_name_filter: The resource name, or null to match any resource name.
# pattern_type_filter: The resource pattern to match.
# principal_filter: The principal to match, or null to match any principal.
# host_filter: The host to match, or null to match any host.
# operation: The operation to match.
# permission_type: The permission type to match.
# _tagged_fields: The tagged fields




DescribeAclsResponseV1 => throttle_time_ms error_code error_message [resources]
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  resources => resource_type resource_name pattern_type [acls]
    resource_type => INT8
    resource_name => STRING
    pattern_type => INT8
    acls => principal host operation permission_type
      principal => STRING
      host => STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# resources: Each Resource that is referenced in an ACL.
# resource_type: The resource type.
# resource_name: The resource name.
# pattern_type: The resource pattern type.
# acls: The ACLs.
# principal: The ACL principal.
# host: The ACL host.
# operation: The ACL operation.
# permission_type: The ACL permission type.


DescribeAclsResponseV2 => throttle_time_ms error_code error_message {resources} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  resources => resource_type resource_name pattern_type {acls} TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    pattern_type => INT8
    acls => principal host operation permission_type TAG_BUFFER
      principal => COMPACT_STRING
      host => COMPACT_STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# resources: Each Resource that is referenced in an ACL.
# resource_type: The resource type.
# resource_name: The resource name.
# pattern_type: The resource pattern type.
# acls: The ACLs.
# principal: The ACL principal.
# host: The ACL host.
# operation: The ACL operation.
# permission_type: The ACL permission type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeAclsResponseV3 => throttle_time_ms error_code error_message {resources} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  resources => resource_type resource_name pattern_type {acls} TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    pattern_type => INT8
    acls => principal host operation permission_type TAG_BUFFER
      principal => COMPACT_STRING
      host => COMPACT_STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# resources: Each Resource that is referenced in an ACL.
# resource_type: The resource type.
# resource_name: The resource name.
# pattern_type: The resource pattern type.
# acls: The ACLs.
# principal: The ACL principal.
# host: The ACL host.
# operation: The ACL operation.
# permission_type: The ACL permission type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: CreateAcls, 30
CreateAclsRequestV1 => [creations]
  creations => resource_type resource_name resource_pattern_type principal host operation permission_type
    resource_type => INT8
    resource_name => STRING
    resource_pattern_type => INT8
    principal => STRING
    host => STRING
    operation => INT8
    permission_type => INT8

# creations: The ACLs that we want to create.
# resource_type: The type of the resource.
# resource_name: The resource name for the ACL.
# resource_pattern_type: The pattern type for the ACL.
# principal: The principal for the ACL.
# host: The host for the ACL.
# operation: The operation type for the ACL (read, write, etc.).
# permission_type: The permission type for the ACL (allow, deny, etc.).


CreateAclsRequestV2 => {creations} TAG_BUFFER
  creations => resource_type resource_name resource_pattern_type principal host operation permission_type TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    resource_pattern_type => INT8
    principal => COMPACT_STRING
    host => COMPACT_STRING
    operation => INT8
    permission_type => INT8

# creations: The ACLs that we want to create.
# resource_type: The type of the resource.
# resource_name: The resource name for the ACL.
# resource_pattern_type: The pattern type for the ACL.
# principal: The principal for the ACL.
# host: The host for the ACL.
# operation: The operation type for the ACL (read, write, etc.).
# permission_type: The permission type for the ACL (allow, deny, etc.).
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


CreateAclsRequestV3 => {creations} TAG_BUFFER
  creations => resource_type resource_name resource_pattern_type principal host operation permission_type TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    resource_pattern_type => INT8
    principal => COMPACT_STRING
    host => COMPACT_STRING
    operation => INT8
    permission_type => INT8

# creations: The ACLs that we want to create.
# resource_type: The type of the resource.
# resource_name: The resource name for the ACL.
# resource_pattern_type: The pattern type for the ACL.
# principal: The principal for the ACL.
# host: The host for the ACL.
# operation: The operation type for the ACL (read, write, etc.).
# permission_type: The permission type for the ACL (allow, deny, etc.).
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




CreateAclsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => error_code error_message
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each ACL creation.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


CreateAclsResponseV2 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => error_code error_message TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each ACL creation.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


CreateAclsResponseV3 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => error_code error_message TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each ACL creation.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DeleteAcls, 31
DeleteAclsRequestV1 => [filters]
  filters => resource_type_filter resource_name_filter pattern_type_filter principal_filter host_filter operation permission_type
    resource_type_filter => INT8
    resource_name_filter => NULLABLE_STRING
    pattern_type_filter => INT8
    principal_filter => NULLABLE_STRING
    host_filter => NULLABLE_STRING
    operation => INT8
    permission_type => INT8

# filters: The filters to use when deleting ACLs.
# resource_type_filter: The resource type.
# resource_name_filter: The resource name.
# pattern_type_filter: The pattern type.
# principal_filter: The principal filter, or null to accept all principals.
# host_filter: The host filter, or null to accept all hosts.
# operation: The ACL operation.
# permission_type: The permission type.


DeleteAclsRequestV2 => {filters} TAG_BUFFER
  filters => resource_type_filter resource_name_filter pattern_type_filter principal_filter host_filter operation permission_type TAG_BUFFER
    resource_type_filter => INT8
    resource_name_filter => COMPACT_NULLABLE_STRING
    pattern_type_filter => INT8
    principal_filter => COMPACT_NULLABLE_STRING
    host_filter => COMPACT_NULLABLE_STRING
    operation => INT8
    permission_type => INT8

# filters: The filters to use when deleting ACLs.
# resource_type_filter: The resource type.
# resource_name_filter: The resource name.
# pattern_type_filter: The pattern type.
# principal_filter: The principal filter, or null to accept all principals.
# host_filter: The host filter, or null to accept all hosts.
# operation: The ACL operation.
# permission_type: The permission type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DeleteAclsRequestV3 => {filters} TAG_BUFFER
  filters => resource_type_filter resource_name_filter pattern_type_filter principal_filter host_filter operation permission_type TAG_BUFFER
    resource_type_filter => INT8
    resource_name_filter => COMPACT_NULLABLE_STRING
    pattern_type_filter => INT8
    principal_filter => COMPACT_NULLABLE_STRING
    host_filter => COMPACT_NULLABLE_STRING
    operation => INT8
    permission_type => INT8

# filters: The filters to use when deleting ACLs.
# resource_type_filter: The resource type.
# resource_name_filter: The resource name.
# pattern_type_filter: The pattern type.
# principal_filter: The principal filter, or null to accept all principals.
# host_filter: The host filter, or null to accept all hosts.
# operation: The ACL operation.
# permission_type: The permission type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




DeleteAclsResponseV1 => throttle_time_ms [filter_results]
  throttle_time_ms => INT32
  filter_results => error_code error_message [matching_acls]
    error_code => INT16
    error_message => NULLABLE_STRING
    matching_acls => error_code error_message resource_type resource_name pattern_type principal host operation permission_type
      error_code => INT16
      error_message => NULLABLE_STRING
      resource_type => INT8
      resource_name => STRING
      pattern_type => INT8
      principal => STRING
      host => STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# filter_results: The results for each filter.
# error_code: The error code, or 0 if the filter succeeded.
# error_message: The error message, or null if the filter succeeded.
# matching_acls: The ACLs which matched this filter.
# error_code: The deletion error code, or 0 if the deletion succeeded.
# error_message: The deletion error message, or null if the deletion succeeded.
# resource_type: The ACL resource type.
# resource_name: The ACL resource name.
# pattern_type: The ACL resource pattern type.
# principal: The ACL principal.
# host: The ACL host.
# operation: The ACL operation.
# permission_type: The ACL permission type.


DeleteAclsResponseV2 => throttle_time_ms {filter_results} TAG_BUFFER
  throttle_time_ms => INT32
  filter_results => error_code error_message {matching_acls} TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    matching_acls => error_code error_message resource_type resource_name pattern_type principal host operation permission_type TAG_BUFFER
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING
      resource_type => INT8
      resource_name => COMPACT_STRING
      pattern_type => INT8
      principal => COMPACT_STRING
      host => COMPACT_STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# filter_results: The results for each filter.
# error_code: The error code, or 0 if the filter succeeded.
# error_message: The error message, or null if the filter succeeded.
# matching_acls: The ACLs which matched this filter.
# error_code: The deletion error code, or 0 if the deletion succeeded.
# error_message: The deletion error message, or null if the deletion succeeded.
# resource_type: The ACL resource type.
# resource_name: The ACL resource name.
# pattern_type: The ACL resource pattern type.
# principal: The ACL principal.
# host: The ACL host.
# operation: The ACL operation.
# permission_type: The ACL permission type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DeleteAclsResponseV3 => throttle_time_ms {filter_results} TAG_BUFFER
  throttle_time_ms => INT32
  filter_results => error_code error_message {matching_acls} TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    matching_acls => error_code error_message resource_type resource_name pattern_type principal host operation permission_type TAG_BUFFER
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING
      resource_type => INT8
      resource_name => COMPACT_STRING
      pattern_type => INT8
      principal => COMPACT_STRING
      host => COMPACT_STRING
      operation => INT8
      permission_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# filter_results: The results for each filter.
# error_code: The error code, or 0 if the filter succeeded.
# error_message: The error message, or null if the filter succeeded.
# matching_acls: The ACLs which matched this filter.
# error_code: The deletion error code, or 0 if the deletion succeeded.
# error_message: The deletion error message, or null if the deletion succeeded.
# resource_type: The ACL resource type.
# resource_name: The ACL resource name.
# pattern_type: The ACL resource pattern type.
# principal: The ACL principal.
# host: The ACL host.
# operation: The ACL operation.
# permission_type: The ACL permission type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeConfigs, 32
DescribeConfigsRequestV1 => [resources] include_synonyms
  resources => resource_type resource_name [configuration_keys]
    resource_type => INT8
    resource_name => STRING
    configuration_keys => STRING
  include_synonyms => BOOLEAN

# resources: The resources whose configurations we want to describe.
# resource_type: The resource type.
# resource_name: The resource name.
# configuration_keys: The configuration keys to list, or null to list all configuration keys.
# include_synonyms: True if we should include all synonyms.


DescribeConfigsRequestV2 => [resources] include_synonyms
  resources => resource_type resource_name [configuration_keys]
    resource_type => INT8
    resource_name => STRING
    configuration_keys => STRING
  include_synonyms => BOOLEAN

# resources: The resources whose configurations we want to describe.
# resource_type: The resource type.
# resource_name: The resource name.
# configuration_keys: The configuration keys to list, or null to list all configuration keys.
# include_synonyms: True if we should include all synonyms.


DescribeConfigsRequestV3 => [resources] include_synonyms include_documentation
  resources => resource_type resource_name [configuration_keys]
    resource_type => INT8
    resource_name => STRING
    configuration_keys => STRING
  include_synonyms => BOOLEAN
  include_documentation => BOOLEAN

# resources: The resources whose configurations we want to describe.
# resource_type: The resource type.
# resource_name: The resource name.
# configuration_keys: The configuration keys to list, or null to list all configuration keys.
# include_synonyms: True if we should include all synonyms.
# include_documentation: True if we should include configuration documentation.


DescribeConfigsRequestV4 => {resources} include_synonyms include_documentation TAG_BUFFER
  resources => resource_type resource_name {configuration_keys} TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    configuration_keys => COMPACT_STRING
  include_synonyms => BOOLEAN
  include_documentation => BOOLEAN

# resources: The resources whose configurations we want to describe.
# resource_type: The resource type.
# resource_name: The resource name.
# configuration_keys: The configuration keys to list, or null to list all configuration keys.
# _tagged_fields: The tagged fields
# include_synonyms: True if we should include all synonyms.
# include_documentation: True if we should include configuration documentation.
# _tagged_fields: The tagged fields




DescribeConfigsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => error_code error_message resource_type resource_name [configs]
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING
    configs => name value read_only config_source is_sensitive [synonyms]
      name => STRING
      value => NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN
      synonyms => name value source
        name => STRING
        value => NULLABLE_STRING
        source => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each resource.
# error_code: The error code, or 0 if we were able to successfully describe the configurations.
# error_message: The error message, or null if we were able to successfully describe the configurations.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: Each listed configuration.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# synonyms: The synonyms for this configuration key.
# name: The synonym name.
# value: The synonym value.
# source: The synonym source.


DescribeConfigsResponseV2 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => error_code error_message resource_type resource_name [configs]
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING
    configs => name value read_only config_source is_sensitive [synonyms]
      name => STRING
      value => NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN
      synonyms => name value source
        name => STRING
        value => NULLABLE_STRING
        source => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each resource.
# error_code: The error code, or 0 if we were able to successfully describe the configurations.
# error_message: The error message, or null if we were able to successfully describe the configurations.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: Each listed configuration.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# synonyms: The synonyms for this configuration key.
# name: The synonym name.
# value: The synonym value.
# source: The synonym source.


DescribeConfigsResponseV3 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => error_code error_message resource_type resource_name [configs]
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING
    configs => name value read_only config_source is_sensitive [synonyms] config_type documentation
      name => STRING
      value => NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN
      synonyms => name value source
        name => STRING
        value => NULLABLE_STRING
        source => INT8
      config_type => INT8
      documentation => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each resource.
# error_code: The error code, or 0 if we were able to successfully describe the configurations.
# error_message: The error message, or null if we were able to successfully describe the configurations.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: Each listed configuration.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# synonyms: The synonyms for this configuration key.
# name: The synonym name.
# value: The synonym value.
# source: The synonym source.
# config_type: The configuration data type. Type can be one of the following values - BOOLEAN, STRING, INT, SHORT, LONG, DOUBLE, LIST, CLASS, PASSWORD.
# documentation: The configuration documentation.


DescribeConfigsResponseV4 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => error_code error_message resource_type resource_name {configs} TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    resource_type => INT8
    resource_name => COMPACT_STRING
    configs => name value read_only config_source is_sensitive {synonyms} config_type documentation TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
      read_only => BOOLEAN
      config_source => INT8
      is_sensitive => BOOLEAN
      synonyms => name value source TAG_BUFFER
        name => COMPACT_STRING
        value => COMPACT_NULLABLE_STRING
        source => INT8
      config_type => INT8
      documentation => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each resource.
# error_code: The error code, or 0 if we were able to successfully describe the configurations.
# error_message: The error message, or null if we were able to successfully describe the configurations.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: Each listed configuration.
# name: The configuration name.
# value: The configuration value.
# read_only: True if the configuration is read-only.
# config_source: The configuration source.
# is_sensitive: True if this configuration is sensitive.
# synonyms: The synonyms for this configuration key.
# name: The synonym name.
# value: The synonym value.
# source: The synonym source.
# _tagged_fields: The tagged fields
# config_type: The configuration data type. Type can be one of the following values - BOOLEAN, STRING, INT, SHORT, LONG, DOUBLE, LIST, CLASS, PASSWORD.
# documentation: The configuration documentation.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterConfigs, 33
AlterConfigsRequestV0 => [resources] validate_only
  resources => resource_type resource_name [configs]
    resource_type => INT8
    resource_name => STRING
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# value: The value to set for the configuration key.
# validate_only: True if we should validate the request, but not change the configurations.


AlterConfigsRequestV1 => [resources] validate_only
  resources => resource_type resource_name [configs]
    resource_type => INT8
    resource_name => STRING
    configs => name value
      name => STRING
      value => NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# value: The value to set for the configuration key.
# validate_only: True if we should validate the request, but not change the configurations.


AlterConfigsRequestV2 => {resources} validate_only TAG_BUFFER
  resources => resource_type resource_name {configs} TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    configs => name value TAG_BUFFER
      name => COMPACT_STRING
      value => COMPACT_NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# value: The value to set for the configuration key.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# validate_only: True if we should validate the request, but not change the configurations.
# _tagged_fields: The tagged fields


AlterConfigsResponseV0 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.


AlterConfigsResponseV1 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.


AlterConfigsResponseV2 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    resource_type => INT8
    resource_name => COMPACT_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterReplicaLogDirs, 34
AlterReplicaLogDirsRequestV1 => [dirs]
  dirs => path [topics]
    path => STRING
    topics => name [partitions]
      name => STRING
      partitions => INT32

# dirs: The alterations to make for each directory.
# path: The absolute directory path.
# topics: The topics to add to the directory.
# name: The topic name.
# partitions: The partition indexes.


AlterReplicaLogDirsRequestV2 => {dirs} TAG_BUFFER
  dirs => path {topics} TAG_BUFFER
    path => COMPACT_STRING
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => INT32

# dirs: The alterations to make for each directory.
# path: The absolute directory path.
# topics: The topics to add to the directory.
# name: The topic name.
# partitions: The partition indexes.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




AlterReplicaLogDirsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => topic_name [partitions]
    topic_name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each topic.
# topic_name: The name of the topic.
# partitions: The results for each partition.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


AlterReplicaLogDirsResponseV2 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => topic_name {partitions} TAG_BUFFER
    topic_name => COMPACT_STRING
    partitions => partition_index error_code TAG_BUFFER
      partition_index => INT32
      error_code => INT16

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for each topic.
# topic_name: The name of the topic.
# partitions: The results for each partition.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeLogDirs, 35
DescribeLogDirsRequestV1 => [topics]
  topics => topic [partitions]
    topic => STRING
    partitions => INT32

# topics: Each topic that we want to describe log directories for, or null for all topics.
# topic: The topic name.
# partitions: The partition indexes.


DescribeLogDirsRequestV2 => {topics} TAG_BUFFER
  topics => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => INT32

# topics: Each topic that we want to describe log directories for, or null for all topics.
# topic: The topic name.
# partitions: The partition indexes.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeLogDirsRequestV3 => {topics} TAG_BUFFER
  topics => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => INT32

# topics: Each topic that we want to describe log directories for, or null for all topics.
# topic: The topic name.
# partitions: The partition indexes.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeLogDirsRequestV4 => {topics} TAG_BUFFER
  topics => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => INT32

# topics: Each topic that we want to describe log directories for, or null for all topics.
# topic: The topic name.
# partitions: The partition indexes.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




DescribeLogDirsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => error_code log_dir [topics]
    error_code => INT16
    log_dir => STRING
    topics => name [partitions]
      name => STRING
      partitions => partition_index partition_size offset_lag is_future_key
        partition_index => INT32
        partition_size => INT64
        offset_lag => INT64
        is_future_key => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The log directories.
# error_code: The error code, or 0 if there was no error.
# log_dir: The absolute log directory path.
# topics: The topics.
# name: The topic name.
# partitions: The partitions.
# partition_index: The partition index.
# partition_size: The size of the log segments in this partition in bytes.
# offset_lag: The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or current replica's LEO (if it is the future log for the partition).
# is_future_key: True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the replica in the future.


DescribeLogDirsResponseV2 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => error_code log_dir {topics} TAG_BUFFER
    error_code => INT16
    log_dir => COMPACT_STRING
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => partition_index partition_size offset_lag is_future_key TAG_BUFFER
        partition_index => INT32
        partition_size => INT64
        offset_lag => INT64
        is_future_key => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The log directories.
# error_code: The error code, or 0 if there was no error.
# log_dir: The absolute log directory path.
# topics: The topics.
# name: The topic name.
# partitions: The partitions.
# partition_index: The partition index.
# partition_size: The size of the log segments in this partition in bytes.
# offset_lag: The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or current replica's LEO (if it is the future log for the partition).
# is_future_key: True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the replica in the future.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeLogDirsResponseV3 => throttle_time_ms error_code {results} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  results => error_code log_dir {topics} TAG_BUFFER
    error_code => INT16
    log_dir => COMPACT_STRING
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => partition_index partition_size offset_lag is_future_key TAG_BUFFER
        partition_index => INT32
        partition_size => INT64
        offset_lag => INT64
        is_future_key => BOOLEAN

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# results: The log directories.
# error_code: The error code, or 0 if there was no error.
# log_dir: The absolute log directory path.
# topics: The topics.
# name: The topic name.
# partitions: The partitions.
# partition_index: The partition index.
# partition_size: The size of the log segments in this partition in bytes.
# offset_lag: The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or current replica's LEO (if it is the future log for the partition).
# is_future_key: True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the replica in the future.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeLogDirsResponseV4 => throttle_time_ms error_code {results} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  results => error_code log_dir {topics} total_bytes usable_bytes TAG_BUFFER
    error_code => INT16
    log_dir => COMPACT_STRING
    topics => name {partitions} TAG_BUFFER
      name => COMPACT_STRING
      partitions => partition_index partition_size offset_lag is_future_key TAG_BUFFER
        partition_index => INT32
        partition_size => INT64
        offset_lag => INT64
        is_future_key => BOOLEAN
    total_bytes => INT64
    usable_bytes => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# results: The log directories.
# error_code: The error code, or 0 if there was no error.
# log_dir: The absolute log directory path.
# topics: The topics.
# name: The topic name.
# partitions: The partitions.
# partition_index: The partition index.
# partition_size: The size of the log segments in this partition in bytes.
# offset_lag: The lag of the log's LEO w.r.t. partition's HW (if it is the current log for the partition) or current replica's LEO (if it is the future log for the partition).
# is_future_key: True if this log is created by AlterReplicaLogDirsRequest and will replace the current log of the replica in the future.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# total_bytes: The total size in bytes of the volume the log directory is in.
# usable_bytes: The usable size in bytes of the volume the log directory is in.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: SaslAuthenticate, 36
SaslAuthenticateRequestV0 => auth_bytes
  auth_bytes => BYTES

# auth_bytes: The SASL authentication bytes from the client, as defined by the SASL mechanism.


SaslAuthenticateRequestV1 => auth_bytes
  auth_bytes => BYTES

# auth_bytes: The SASL authentication bytes from the client, as defined by the SASL mechanism.


SaslAuthenticateRequestV2 => auth_bytes TAG_BUFFER
  auth_bytes => COMPACT_BYTES

# auth_bytes: The SASL authentication bytes from the client, as defined by the SASL mechanism.
# _tagged_fields: The tagged fields


SaslAuthenticateResponseV0 => error_code error_message auth_bytes
  error_code => INT16
  error_message => NULLABLE_STRING
  auth_bytes => BYTES

# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# auth_bytes: The SASL authentication bytes from the server, as defined by the SASL mechanism.


SaslAuthenticateResponseV1 => error_code error_message auth_bytes session_lifetime_ms
  error_code => INT16
  error_message => NULLABLE_STRING
  auth_bytes => BYTES
  session_lifetime_ms => INT64

# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# auth_bytes: The SASL authentication bytes from the server, as defined by the SASL mechanism.
# session_lifetime_ms: Number of milliseconds after which only re-authentication over the existing connection to create a new session can occur.


SaslAuthenticateResponseV2 => error_code error_message auth_bytes session_lifetime_ms TAG_BUFFER
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  auth_bytes => COMPACT_BYTES
  session_lifetime_ms => INT64

# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# auth_bytes: The SASL authentication bytes from the server, as defined by the SASL mechanism.
# session_lifetime_ms: Number of milliseconds after which only re-authentication over the existing connection to create a new session can occur.
# _tagged_fields: The tagged fields


#ApiKey: CreatePartitions, 37
CreatePartitionsRequestV0 => [topics] timeout_ms validate_only
  topics => name count [assignments]
    name => STRING
    count => INT32
    assignments => [broker_ids]
      broker_ids => INT32
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: Each topic that we want to create new partitions inside.
# name: The topic name.
# count: The new partition count.
# assignments: The new partition assignments.
# broker_ids: The assigned broker IDs.
# timeout_ms: The time in ms to wait for the partitions to be created.
# validate_only: If true, then validate the request, but don't actually increase the number of partitions.


CreatePartitionsRequestV1 => [topics] timeout_ms validate_only
  topics => name count [assignments]
    name => STRING
    count => INT32
    assignments => [broker_ids]
      broker_ids => INT32
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: Each topic that we want to create new partitions inside.
# name: The topic name.
# count: The new partition count.
# assignments: The new partition assignments.
# broker_ids: The assigned broker IDs.
# timeout_ms: The time in ms to wait for the partitions to be created.
# validate_only: If true, then validate the request, but don't actually increase the number of partitions.


CreatePartitionsRequestV2 => {topics} timeout_ms validate_only TAG_BUFFER
  topics => name count {assignments} TAG_BUFFER
    name => COMPACT_STRING
    count => INT32
    assignments => {broker_ids} TAG_BUFFER
      broker_ids => INT32
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: Each topic that we want to create new partitions inside.
# name: The topic name.
# count: The new partition count.
# assignments: The new partition assignments.
# broker_ids: The assigned broker IDs.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: The time in ms to wait for the partitions to be created.
# validate_only: If true, then validate the request, but don't actually increase the number of partitions.
# _tagged_fields: The tagged fields


CreatePartitionsRequestV3 => {topics} timeout_ms validate_only TAG_BUFFER
  topics => name count {assignments} TAG_BUFFER
    name => COMPACT_STRING
    count => INT32
    assignments => {broker_ids} TAG_BUFFER
      broker_ids => INT32
  timeout_ms => INT32
  validate_only => BOOLEAN

# topics: Each topic that we want to create new partitions inside.
# name: The topic name.
# count: The new partition count.
# assignments: The new partition assignments.
# broker_ids: The assigned broker IDs.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# timeout_ms: The time in ms to wait for the partitions to be created.
# validate_only: If true, then validate the request, but don't actually increase the number of partitions.
# _tagged_fields: The tagged fields


CreatePartitionsResponseV0 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The partition creation results for each topic.
# name: The topic name.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


CreatePartitionsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => name error_code error_message
    name => STRING
    error_code => INT16
    error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The partition creation results for each topic.
# name: The topic name.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


CreatePartitionsResponseV2 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => name error_code error_message TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The partition creation results for each topic.
# name: The topic name.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


CreatePartitionsResponseV3 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => name error_code error_message TAG_BUFFER
    name => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The partition creation results for each topic.
# name: The topic name.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: CreateDelegationToken, 38
CreateDelegationTokenRequestV1 => [renewers] max_lifetime_ms
  renewers => principal_type principal_name
    principal_type => STRING
    principal_name => STRING
  max_lifetime_ms => INT64

# renewers: A list of those who are allowed to renew this token before it expires.
# principal_type: The type of the Kafka principal.
# principal_name: The name of the Kafka principal.
# max_lifetime_ms: The maximum lifetime of the token in milliseconds, or -1 to use the server side default.


CreateDelegationTokenRequestV2 => {renewers} max_lifetime_ms TAG_BUFFER
  renewers => principal_type principal_name TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING
  max_lifetime_ms => INT64

# renewers: A list of those who are allowed to renew this token before it expires.
# principal_type: The type of the Kafka principal.
# principal_name: The name of the Kafka principal.
# _tagged_fields: The tagged fields
# max_lifetime_ms: The maximum lifetime of the token in milliseconds, or -1 to use the server side default.
# _tagged_fields: The tagged fields


CreateDelegationTokenRequestV3 => owner_principal_type owner_principal_name {renewers} max_lifetime_ms TAG_BUFFER
  owner_principal_type => COMPACT_NULLABLE_STRING
  owner_principal_name => COMPACT_NULLABLE_STRING
  renewers => principal_type principal_name TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING
  max_lifetime_ms => INT64

# owner_principal_type: The principal type of the owner of the token. If it's null it defaults to the token request principal.
# owner_principal_name: The principal name of the owner of the token. If it's null it defaults to the token request principal.
# renewers: A list of those who are allowed to renew this token before it expires.
# principal_type: The type of the Kafka principal.
# principal_name: The name of the Kafka principal.
# _tagged_fields: The tagged fields
# max_lifetime_ms: The maximum lifetime of the token in milliseconds, or -1 to use the server side default.
# _tagged_fields: The tagged fields




CreateDelegationTokenResponseV1 => error_code principal_type principal_name issue_timestamp_ms expiry_timestamp_ms max_timestamp_ms token_id hmac throttle_time_ms
  error_code => INT16
  principal_type => STRING
  principal_name => STRING
  issue_timestamp_ms => INT64
  expiry_timestamp_ms => INT64
  max_timestamp_ms => INT64
  token_id => STRING
  hmac => BYTES
  throttle_time_ms => INT32

# error_code: The top-level error, or zero if there was no error.
# principal_type: The principal type of the token owner.
# principal_name: The name of the token owner.
# issue_timestamp_ms: When this token was generated.
# expiry_timestamp_ms: When this token expires.
# max_timestamp_ms: The maximum lifetime of this token.
# token_id: The token UUID.
# hmac: HMAC of the delegation token.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


CreateDelegationTokenResponseV2 => error_code principal_type principal_name issue_timestamp_ms expiry_timestamp_ms max_timestamp_ms token_id hmac throttle_time_ms TAG_BUFFER
  error_code => INT16
  principal_type => COMPACT_STRING
  principal_name => COMPACT_STRING
  issue_timestamp_ms => INT64
  expiry_timestamp_ms => INT64
  max_timestamp_ms => INT64
  token_id => COMPACT_STRING
  hmac => COMPACT_BYTES
  throttle_time_ms => INT32

# error_code: The top-level error, or zero if there was no error.
# principal_type: The principal type of the token owner.
# principal_name: The name of the token owner.
# issue_timestamp_ms: When this token was generated.
# expiry_timestamp_ms: When this token expires.
# max_timestamp_ms: The maximum lifetime of this token.
# token_id: The token UUID.
# hmac: HMAC of the delegation token.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


CreateDelegationTokenResponseV3 => error_code principal_type principal_name token_requester_principal_type token_requester_principal_name issue_timestamp_ms expiry_timestamp_ms max_timestamp_ms token_id hmac throttle_time_ms TAG_BUFFER
  error_code => INT16
  principal_type => COMPACT_STRING
  principal_name => COMPACT_STRING
  token_requester_principal_type => COMPACT_STRING
  token_requester_principal_name => COMPACT_STRING
  issue_timestamp_ms => INT64
  expiry_timestamp_ms => INT64
  max_timestamp_ms => INT64
  token_id => COMPACT_STRING
  hmac => COMPACT_BYTES
  throttle_time_ms => INT32

# error_code: The top-level error, or zero if there was no error.
# principal_type: The principal type of the token owner.
# principal_name: The name of the token owner.
# token_requester_principal_type: The principal type of the requester of the token.
# token_requester_principal_name: The principal type of the requester of the token.
# issue_timestamp_ms: When this token was generated.
# expiry_timestamp_ms: When this token expires.
# max_timestamp_ms: The maximum lifetime of this token.
# token_id: The token UUID.
# hmac: HMAC of the delegation token.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: RenewDelegationToken, 39
RenewDelegationTokenRequestV1 => hmac renew_period_ms
  hmac => BYTES
  renew_period_ms => INT64

# hmac: The HMAC of the delegation token to be renewed.
# renew_period_ms: The renewal time period in milliseconds.


RenewDelegationTokenRequestV2 => hmac renew_period_ms TAG_BUFFER
  hmac => COMPACT_BYTES
  renew_period_ms => INT64

# hmac: The HMAC of the delegation token to be renewed.
# renew_period_ms: The renewal time period in milliseconds.
# _tagged_fields: The tagged fields




RenewDelegationTokenResponseV1 => error_code expiry_timestamp_ms throttle_time_ms
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


RenewDelegationTokenResponseV2 => error_code expiry_timestamp_ms throttle_time_ms TAG_BUFFER
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: ExpireDelegationToken, 40
ExpireDelegationTokenRequestV1 => hmac expiry_time_period_ms
  hmac => BYTES
  expiry_time_period_ms => INT64

# hmac: The HMAC of the delegation token to be expired.
# expiry_time_period_ms: The expiry time period in milliseconds.


ExpireDelegationTokenRequestV2 => hmac expiry_time_period_ms TAG_BUFFER
  hmac => COMPACT_BYTES
  expiry_time_period_ms => INT64

# hmac: The HMAC of the delegation token to be expired.
# expiry_time_period_ms: The expiry time period in milliseconds.
# _tagged_fields: The tagged fields




ExpireDelegationTokenResponseV1 => error_code expiry_timestamp_ms throttle_time_ms
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


ExpireDelegationTokenResponseV2 => error_code expiry_timestamp_ms throttle_time_ms TAG_BUFFER
  error_code => INT16
  expiry_timestamp_ms => INT64
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# expiry_timestamp_ms: The timestamp in milliseconds at which this token expires.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: DescribeDelegationToken, 41
DescribeDelegationTokenRequestV1 => [owners]
  owners => principal_type principal_name
    principal_type => STRING
    principal_name => STRING

# owners: Each owner that we want to describe delegation tokens for, or null to describe all tokens.
# principal_type: The owner principal type.
# principal_name: The owner principal name.


DescribeDelegationTokenRequestV2 => {owners} TAG_BUFFER
  owners => principal_type principal_name TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING

# owners: Each owner that we want to describe delegation tokens for, or null to describe all tokens.
# principal_type: The owner principal type.
# principal_name: The owner principal name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeDelegationTokenRequestV3 => {owners} TAG_BUFFER
  owners => principal_type principal_name TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING

# owners: Each owner that we want to describe delegation tokens for, or null to describe all tokens.
# principal_type: The owner principal type.
# principal_name: The owner principal name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




DescribeDelegationTokenResponseV1 => error_code [tokens] throttle_time_ms
  error_code => INT16
  tokens => principal_type principal_name issue_timestamp expiry_timestamp max_timestamp token_id hmac [renewers]
    principal_type => STRING
    principal_name => STRING
    issue_timestamp => INT64
    expiry_timestamp => INT64
    max_timestamp => INT64
    token_id => STRING
    hmac => BYTES
    renewers => principal_type principal_name
      principal_type => STRING
      principal_name => STRING
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# tokens: The tokens.
# principal_type: The token principal type.
# principal_name: The token principal name.
# issue_timestamp: The token issue timestamp in milliseconds.
# expiry_timestamp: The token expiry timestamp in milliseconds.
# max_timestamp: The token maximum timestamp length in milliseconds.
# token_id: The token ID.
# hmac: The token HMAC.
# renewers: Those who are able to renew this token before it expires.
# principal_type: The renewer principal type.
# principal_name: The renewer principal name.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.


DescribeDelegationTokenResponseV2 => error_code {tokens} throttle_time_ms TAG_BUFFER
  error_code => INT16
  tokens => principal_type principal_name issue_timestamp expiry_timestamp max_timestamp token_id hmac {renewers} TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING
    issue_timestamp => INT64
    expiry_timestamp => INT64
    max_timestamp => INT64
    token_id => COMPACT_STRING
    hmac => COMPACT_BYTES
    renewers => principal_type principal_name TAG_BUFFER
      principal_type => COMPACT_STRING
      principal_name => COMPACT_STRING
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# tokens: The tokens.
# principal_type: The token principal type.
# principal_name: The token principal name.
# issue_timestamp: The token issue timestamp in milliseconds.
# expiry_timestamp: The token expiry timestamp in milliseconds.
# max_timestamp: The token maximum timestamp length in milliseconds.
# token_id: The token ID.
# hmac: The token HMAC.
# renewers: Those who are able to renew this token before it expires.
# principal_type: The renewer principal type.
# principal_name: The renewer principal name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


DescribeDelegationTokenResponseV3 => error_code {tokens} throttle_time_ms TAG_BUFFER
  error_code => INT16
  tokens => principal_type principal_name token_requester_principal_type token_requester_principal_name issue_timestamp expiry_timestamp max_timestamp token_id hmac {renewers} TAG_BUFFER
    principal_type => COMPACT_STRING
    principal_name => COMPACT_STRING
    token_requester_principal_type => COMPACT_STRING
    token_requester_principal_name => COMPACT_STRING
    issue_timestamp => INT64
    expiry_timestamp => INT64
    max_timestamp => INT64
    token_id => COMPACT_STRING
    hmac => COMPACT_BYTES
    renewers => principal_type principal_name TAG_BUFFER
      principal_type => COMPACT_STRING
      principal_name => COMPACT_STRING
  throttle_time_ms => INT32

# error_code: The error code, or 0 if there was no error.
# tokens: The tokens.
# principal_type: The token principal type.
# principal_name: The token principal name.
# token_requester_principal_type: The principal type of the requester of the token.
# token_requester_principal_name: The principal type of the requester of the token.
# issue_timestamp: The token issue timestamp in milliseconds.
# expiry_timestamp: The token expiry timestamp in milliseconds.
# max_timestamp: The token maximum timestamp length in milliseconds.
# token_id: The token ID.
# hmac: The token HMAC.
# renewers: Those who are able to renew this token before it expires.
# principal_type: The renewer principal type.
# principal_name: The renewer principal name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# _tagged_fields: The tagged fields


#ApiKey: DeleteGroups, 42
DeleteGroupsRequestV0 => [groups_names]
  groups_names => STRING

# groups_names: The group names to delete.


DeleteGroupsRequestV1 => [groups_names]
  groups_names => STRING

# groups_names: The group names to delete.


DeleteGroupsRequestV2 => {groups_names} TAG_BUFFER
  groups_names => COMPACT_STRING

# groups_names: The group names to delete.
# _tagged_fields: The tagged fields


DeleteGroupsResponseV0 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => group_id error_code
    group_id => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The deletion results.
# group_id: The group id.
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteGroupsResponseV1 => throttle_time_ms [results]
  throttle_time_ms => INT32
  results => group_id error_code
    group_id => STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The deletion results.
# group_id: The group id.
# error_code: The deletion error, or 0 if the deletion succeeded.


DeleteGroupsResponseV2 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => group_id error_code TAG_BUFFER
    group_id => COMPACT_STRING
    error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The deletion results.
# group_id: The group id.
# error_code: The deletion error, or 0 if the deletion succeeded.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ElectLeaders, 43
ElectLeadersRequestV0 => [topic_partitions] timeout_ms
  topic_partitions => topic [partitions]
    topic => STRING
    partitions => INT32
  timeout_ms => INT32

# topic_partitions: The topic partitions to elect leaders.
# topic: The name of a topic.
# partitions: The partitions of this topic whose leader should be elected.
# timeout_ms: The time in ms to wait for the election to complete.


ElectLeadersRequestV1 => election_type [topic_partitions] timeout_ms
  election_type => INT8
  topic_partitions => topic [partitions]
    topic => STRING
    partitions => INT32
  timeout_ms => INT32

# election_type: Type of elections to conduct for the partition. A value of '0' elects the preferred replica. A value of '1' elects the first live replica if there are no in-sync replica.
# topic_partitions: The topic partitions to elect leaders.
# topic: The name of a topic.
# partitions: The partitions of this topic whose leader should be elected.
# timeout_ms: The time in ms to wait for the election to complete.


ElectLeadersRequestV2 => election_type {topic_partitions} timeout_ms TAG_BUFFER
  election_type => INT8
  topic_partitions => topic {partitions} TAG_BUFFER
    topic => COMPACT_STRING
    partitions => INT32
  timeout_ms => INT32

# election_type: Type of elections to conduct for the partition. A value of '0' elects the preferred replica. A value of '1' elects the first live replica if there are no in-sync replica.
# topic_partitions: The topic partitions to elect leaders.
# topic: The name of a topic.
# partitions: The partitions of this topic whose leader should be elected.
# _tagged_fields: The tagged fields
# timeout_ms: The time in ms to wait for the election to complete.
# _tagged_fields: The tagged fields


ElectLeadersResponseV0 => throttle_time_ms [replica_election_results]
  throttle_time_ms => INT32
  replica_election_results => topic [partition_result]
    topic => STRING
    partition_result => partition_id error_code error_message
      partition_id => INT32
      error_code => INT16
      error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# replica_election_results: The election results, or an empty array if the requester did not have permission and the request asks for all partitions.
# topic: The topic name.
# partition_result: The results for each partition.
# partition_id: The partition id.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


ElectLeadersResponseV1 => throttle_time_ms error_code [replica_election_results]
  throttle_time_ms => INT32
  error_code => INT16
  replica_election_results => topic [partition_result]
    topic => STRING
    partition_result => partition_id error_code error_message
      partition_id => INT32
      error_code => INT16
      error_message => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# replica_election_results: The election results, or an empty array if the requester did not have permission and the request asks for all partitions.
# topic: The topic name.
# partition_result: The results for each partition.
# partition_id: The partition id.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.


ElectLeadersResponseV2 => throttle_time_ms error_code {replica_election_results} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  replica_election_results => topic {partition_result} TAG_BUFFER
    topic => COMPACT_STRING
    partition_result => partition_id error_code error_message TAG_BUFFER
      partition_id => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# replica_election_results: The election results, or an empty array if the requester did not have permission and the request asks for all partitions.
# topic: The topic name.
# partition_result: The results for each partition.
# partition_id: The partition id.
# error_code: The result error, or zero if there was no error.
# error_message: The result message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: IncrementalAlterConfigs, 44
IncrementalAlterConfigsRequestV0 => [resources] validate_only
  resources => resource_type resource_name [configs]
    resource_type => INT8
    resource_name => STRING
    configs => name config_operation value
      name => STRING
      config_operation => INT8
      value => NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The incremental updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# config_operation: The type (Set, Delete, Append, Subtract) of operation.
# value: The value to set for the configuration key.
# validate_only: True if we should validate the request, but not change the configurations.


IncrementalAlterConfigsRequestV1 => {resources} validate_only TAG_BUFFER
  resources => resource_type resource_name {configs} TAG_BUFFER
    resource_type => INT8
    resource_name => COMPACT_STRING
    configs => name config_operation value TAG_BUFFER
      name => COMPACT_STRING
      config_operation => INT8
      value => COMPACT_NULLABLE_STRING
  validate_only => BOOLEAN

# resources: The incremental updates for each resource.
# resource_type: The resource type.
# resource_name: The resource name.
# configs: The configurations.
# name: The configuration key name.
# config_operation: The type (Set, Delete, Append, Subtract) of operation.
# value: The value to set for the configuration key.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# validate_only: True if we should validate the request, but not change the configurations.
# _tagged_fields: The tagged fields


IncrementalAlterConfigsResponseV0 => throttle_time_ms [responses]
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name
    error_code => INT16
    error_message => NULLABLE_STRING
    resource_type => INT8
    resource_name => STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.


IncrementalAlterConfigsResponseV1 => throttle_time_ms {responses} TAG_BUFFER
  throttle_time_ms => INT32
  responses => error_code error_message resource_type resource_name TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    resource_type => INT8
    resource_name => COMPACT_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# responses: The responses for each resource.
# error_code: The resource error code.
# error_message: The resource error message, or null if there was no error.
# resource_type: The resource type.
# resource_name: The resource name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterPartitionReassignments, 45
AlterPartitionReassignmentsRequestV0 => timeout_ms {topics} TAG_BUFFER
  timeout_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index {replicas} TAG_BUFFER
      partition_index => INT32
      replicas => INT32

# timeout_ms: The time in ms to wait for the request to complete.
# topics: The topics to reassign.
# name: The topic name.
# partitions: The partitions to reassign.
# partition_index: The partition index.
# replicas: The replicas to place the partitions on, or null to cancel a pending reassignment for this partition.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AlterPartitionReassignmentsRequestV1 => timeout_ms allow_replication_factor_change {topics} TAG_BUFFER
  timeout_ms => INT32
  allow_replication_factor_change => BOOLEAN
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index {replicas} TAG_BUFFER
      partition_index => INT32
      replicas => INT32

# timeout_ms: The time in ms to wait for the request to complete.
# allow_replication_factor_change: The option indicating whether changing the replication factor of any given partition as part of this request is a valid move.
# topics: The topics to reassign.
# name: The topic name.
# partitions: The partitions to reassign.
# partition_index: The partition index.
# replicas: The replicas to place the partitions on, or null to cancel a pending reassignment for this partition.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AlterPartitionReassignmentsResponseV0 => throttle_time_ms error_code error_message {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  responses => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code error_message TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# responses: The responses to topics to reassign.
# name: The topic name.
# partitions: The responses to partitions to reassign.
# partition_index: The partition index.
# error_code: The error code for this partition, or 0 if there was no error.
# error_message: The error message for this partition, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AlterPartitionReassignmentsResponseV1 => throttle_time_ms allow_replication_factor_change error_code error_message {responses} TAG_BUFFER
  throttle_time_ms => INT32
  allow_replication_factor_change => BOOLEAN
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  responses => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code error_message TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# allow_replication_factor_change: The option indicating whether changing the replication factor of any given partition as part of the request was allowed.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# responses: The responses to topics to reassign.
# name: The topic name.
# partitions: The responses to partitions to reassign.
# partition_index: The partition index.
# error_code: The error code for this partition, or 0 if there was no error.
# error_message: The error message for this partition, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListPartitionReassignments, 46
ListPartitionReassignmentsRequestV0 => timeout_ms {topics} TAG_BUFFER
  timeout_ms => INT32
  topics => name {partition_indexes} TAG_BUFFER
    name => COMPACT_STRING
    partition_indexes => INT32

# timeout_ms: The time in ms to wait for the request to complete.
# topics: The topics to list partition reassignments for, or null to list everything.
# name: The topic name.
# partition_indexes: The partitions to list partition reassignments for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListPartitionReassignmentsResponseV0 => throttle_time_ms error_code error_message {topics} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index {replicas} {adding_replicas} {removing_replicas} TAG_BUFFER
      partition_index => INT32
      replicas => INT32
      adding_replicas => INT32
      removing_replicas => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# topics: The ongoing reassignments for each topic.
# name: The topic name.
# partitions: The ongoing reassignments for each partition.
# partition_index: The index of the partition.
# replicas: The current replica set.
# adding_replicas: The set of replicas we are currently adding.
# removing_replicas: The set of replicas we are currently removing.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: OffsetDelete, 47
OffsetDeleteRequestV0 => group_id [topics]
  group_id => STRING
  topics => name [partitions]
    name => STRING
    partitions => partition_index
      partition_index => INT32

# group_id: The unique group identifier.
# topics: The topics to delete offsets for.
# name: The topic name.
# partitions: Each partition to delete offsets for.
# partition_index: The partition index.


OffsetDeleteResponseV0 => error_code throttle_time_ms [topics]
  error_code => INT16
  throttle_time_ms => INT32
  topics => name [partitions]
    name => STRING
    partitions => partition_index error_code
      partition_index => INT32
      error_code => INT16

# error_code: The top-level error code, or 0 if there was no error.
# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: The responses for each topic.
# name: The topic name.
# partitions: The responses for each partition in the topic.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.


#ApiKey: DescribeClientQuotas, 48
DescribeClientQuotasRequestV0 => [components] strict
  components => entity_type match_type match
    entity_type => STRING
    match_type => INT8
    match => NULLABLE_STRING
  strict => BOOLEAN

# components: Filter components to apply to quota entities.
# entity_type: The entity type that the filter component applies to.
# match_type: How to match the entity {0 = exact name, 1 = default name, 2 = any specified name}.
# match: The string to match against, or null if unused for the match type.
# strict: Whether the match is strict, i.e. should exclude entities with unspecified entity types.


DescribeClientQuotasRequestV1 => {components} strict TAG_BUFFER
  components => entity_type match_type match TAG_BUFFER
    entity_type => COMPACT_STRING
    match_type => INT8
    match => COMPACT_NULLABLE_STRING
  strict => BOOLEAN

# components: Filter components to apply to quota entities.
# entity_type: The entity type that the filter component applies to.
# match_type: How to match the entity {0 = exact name, 1 = default name, 2 = any specified name}.
# match: The string to match against, or null if unused for the match type.
# _tagged_fields: The tagged fields
# strict: Whether the match is strict, i.e. should exclude entities with unspecified entity types.
# _tagged_fields: The tagged fields


DescribeClientQuotasResponseV0 => throttle_time_ms error_code error_message [entries]
  throttle_time_ms => INT32
  error_code => INT16
  error_message => NULLABLE_STRING
  entries => [entity] [values]
    entity => entity_type entity_name
      entity_type => STRING
      entity_name => NULLABLE_STRING
    values => key value
      key => STRING
      value => FLOAT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or `0` if the quota description succeeded.
# error_message: The error message, or `null` if the quota description succeeded.
# entries: A result entry.
# entity: The quota entity description.
# entity_type: The entity type.
# entity_name: The entity name, or null if the default.
# values: The quota values for the entity.
# key: The quota configuration key.
# value: The quota configuration value.


DescribeClientQuotasResponseV1 => throttle_time_ms error_code error_message {entries} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  entries => {entity} {values} TAG_BUFFER
    entity => entity_type entity_name TAG_BUFFER
      entity_type => COMPACT_STRING
      entity_name => COMPACT_NULLABLE_STRING
    values => key value TAG_BUFFER
      key => COMPACT_STRING
      value => FLOAT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or `0` if the quota description succeeded.
# error_message: The error message, or `null` if the quota description succeeded.
# entries: A result entry.
# entity: The quota entity description.
# entity_type: The entity type.
# entity_name: The entity name, or null if the default.
# _tagged_fields: The tagged fields
# values: The quota values for the entity.
# key: The quota configuration key.
# value: The quota configuration value.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterClientQuotas, 49
AlterClientQuotasRequestV0 => [entries] validate_only
  entries => [entity] [ops]
    entity => entity_type entity_name
      entity_type => STRING
      entity_name => NULLABLE_STRING
    ops => key value remove
      key => STRING
      value => FLOAT64
      remove => BOOLEAN
  validate_only => BOOLEAN

# entries: The quota configuration entries to alter.
# entity: The quota entity to alter.
# entity_type: The entity type.
# entity_name: The name of the entity, or null if the default.
# ops: An individual quota configuration entry to alter.
# key: The quota configuration key.
# value: The value to set, otherwise ignored if the value is to be removed.
# remove: Whether the quota configuration value should be removed, otherwise set.
# validate_only: Whether the alteration should be validated, but not performed.


AlterClientQuotasRequestV1 => {entries} validate_only TAG_BUFFER
  entries => {entity} {ops} TAG_BUFFER
    entity => entity_type entity_name TAG_BUFFER
      entity_type => COMPACT_STRING
      entity_name => COMPACT_NULLABLE_STRING
    ops => key value remove TAG_BUFFER
      key => COMPACT_STRING
      value => FLOAT64
      remove => BOOLEAN
  validate_only => BOOLEAN

# entries: The quota configuration entries to alter.
# entity: The quota entity to alter.
# entity_type: The entity type.
# entity_name: The name of the entity, or null if the default.
# _tagged_fields: The tagged fields
# ops: An individual quota configuration entry to alter.
# key: The quota configuration key.
# value: The value to set, otherwise ignored if the value is to be removed.
# remove: Whether the quota configuration value should be removed, otherwise set.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# validate_only: Whether the alteration should be validated, but not performed.
# _tagged_fields: The tagged fields


AlterClientQuotasResponseV0 => throttle_time_ms [entries]
  throttle_time_ms => INT32
  entries => error_code error_message [entity]
    error_code => INT16
    error_message => NULLABLE_STRING
    entity => entity_type entity_name
      entity_type => STRING
      entity_name => NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# entries: The quota configuration entries to alter.
# error_code: The error code, or `0` if the quota alteration succeeded.
# error_message: The error message, or `null` if the quota alteration succeeded.
# entity: The quota entity to alter.
# entity_type: The entity type.
# entity_name: The name of the entity, or null if the default.


AlterClientQuotasResponseV1 => throttle_time_ms {entries} TAG_BUFFER
  throttle_time_ms => INT32
  entries => error_code error_message {entity} TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    entity => entity_type entity_name TAG_BUFFER
      entity_type => COMPACT_STRING
      entity_name => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# entries: The quota configuration entries to alter.
# error_code: The error code, or `0` if the quota alteration succeeded.
# error_message: The error message, or `null` if the quota alteration succeeded.
# entity: The quota entity to alter.
# entity_type: The entity type.
# entity_name: The name of the entity, or null if the default.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeUserScramCredentials, 50
DescribeUserScramCredentialsRequestV0 => {users} TAG_BUFFER
  users => name TAG_BUFFER
    name => COMPACT_STRING

# users: The users to describe, or null/empty to describe all users.
# name: The user name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeUserScramCredentialsResponseV0 => throttle_time_ms error_code error_message {results} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  results => user error_code error_message {credential_infos} TAG_BUFFER
    user => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    credential_infos => mechanism iterations TAG_BUFFER
      mechanism => INT8
      iterations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The message-level error code, 0 except for user authorization or infrastructure issues.
# error_message: The message-level error message, if any.
# results: The results for descriptions, one per user.
# user: The user name.
# error_code: The user-level error code.
# error_message: The user-level error message, if any.
# credential_infos: The mechanism and related information associated with the user's SCRAM credentials.
# mechanism: The SCRAM mechanism.
# iterations: The number of iterations used in the SCRAM credential.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterUserScramCredentials, 51
AlterUserScramCredentialsRequestV0 => {deletions} {upsertions} TAG_BUFFER
  deletions => name mechanism TAG_BUFFER
    name => COMPACT_STRING
    mechanism => INT8
  upsertions => name mechanism iterations salt salted_password TAG_BUFFER
    name => COMPACT_STRING
    mechanism => INT8
    iterations => INT32
    salt => COMPACT_BYTES
    salted_password => COMPACT_BYTES

# deletions: The SCRAM credentials to remove.
# name: The user name.
# mechanism: The SCRAM mechanism.
# _tagged_fields: The tagged fields
# upsertions: The SCRAM credentials to update/insert.
# name: The user name.
# mechanism: The SCRAM mechanism.
# iterations: The number of iterations.
# salt: A random salt generated by the client.
# salted_password: The salted password.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AlterUserScramCredentialsResponseV0 => throttle_time_ms {results} TAG_BUFFER
  throttle_time_ms => INT32
  results => user error_code error_message TAG_BUFFER
    user => COMPACT_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# results: The results for deletions and alterations, one per affected user.
# user: The user name.
# error_code: The error code.
# error_message: The error message, if any.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: FetchSnapshot, 59
FetchSnapshotRequestV0 => replica_id max_bytes {topics} TAG_BUFFER
  replica_id => INT32
  max_bytes => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition current_leader_epoch snapshot_id position TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      snapshot_id => end_offset epoch TAG_BUFFER
        end_offset => INT64
        epoch => INT32
      position => INT64

# replica_id: The broker ID of the follower.
# max_bytes: The maximum bytes to fetch from all of the snapshots.
# topics: The topics to fetch.
# name: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition, -1 for unknown leader epoch.
# snapshot_id: The snapshot endOffset and epoch to fetch.
# end_offset: The end offset of the snapshot.
# epoch: The epoch of the snapshot.
# _tagged_fields: The tagged fields
# position: The byte position within the snapshot to start fetching from.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchSnapshotRequestV1 => replica_id max_bytes {topics} TAG_BUFFER
  replica_id => INT32
  max_bytes => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition current_leader_epoch snapshot_id position TAG_BUFFER
      partition => INT32
      current_leader_epoch => INT32
      snapshot_id => end_offset epoch TAG_BUFFER
        end_offset => INT64
        epoch => INT32
      position => INT64

# replica_id: The broker ID of the follower.
# max_bytes: The maximum bytes to fetch from all of the snapshots.
# topics: The topics to fetch.
# name: The name of the topic to fetch.
# partitions: The partitions to fetch.
# partition: The partition index.
# current_leader_epoch: The current leader epoch of the partition, -1 for unknown leader epoch.
# snapshot_id: The snapshot endOffset and epoch to fetch.
# end_offset: The end offset of the snapshot.
# epoch: The epoch of the snapshot.
# _tagged_fields: The tagged fields
# position: The byte position within the snapshot to start fetching from.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchSnapshotResponseV0 => throttle_time_ms error_code {topics} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => index error_code snapshot_id size position unaligned_records TAG_BUFFER
      index => INT32
      error_code => INT16
      snapshot_id => end_offset epoch TAG_BUFFER
        end_offset => INT64
        epoch => INT32
      size => INT64
      position => INT64
      unaligned_records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# topics: The topics to fetch.
# name: The name of the topic to fetch.
# partitions: The partitions to fetch.
# index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# snapshot_id: The snapshot endOffset and epoch fetched.
# end_offset: The snapshot end offset.
# epoch: The snapshot epoch.
# _tagged_fields: The tagged fields
# size: The total size of the snapshot.
# position: The starting byte position within the snapshot included in the Bytes field.
# unaligned_records: Snapshot data in records format which may not be aligned on an offset boundary.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


FetchSnapshotResponseV1 => throttle_time_ms error_code {topics} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => index error_code snapshot_id size position unaligned_records TAG_BUFFER
      index => INT32
      error_code => INT16
      snapshot_id => end_offset epoch TAG_BUFFER
        end_offset => INT64
        epoch => INT32
      size => INT64
      position => INT64
      unaligned_records => COMPACT_RECORDS

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# topics: The topics to fetch.
# name: The name of the topic to fetch.
# partitions: The partitions to fetch.
# index: The partition index.
# error_code: The error code, or 0 if there was no fetch error.
# snapshot_id: The snapshot endOffset and epoch fetched.
# end_offset: The snapshot end offset.
# epoch: The snapshot epoch.
# _tagged_fields: The tagged fields
# size: The total size of the snapshot.
# position: The starting byte position within the snapshot included in the Bytes field.
# unaligned_records: Snapshot data in records format which may not be aligned on an offset boundary.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeCluster, 60
DescribeClusterRequestV0 => include_cluster_authorized_operations TAG_BUFFER
  include_cluster_authorized_operations => BOOLEAN

# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# _tagged_fields: The tagged fields


DescribeClusterRequestV1 => include_cluster_authorized_operations endpoint_type TAG_BUFFER
  include_cluster_authorized_operations => BOOLEAN
  endpoint_type => INT8

# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# endpoint_type: The endpoint type to describe. 1=brokers, 2=controllers.
# _tagged_fields: The tagged fields


DescribeClusterRequestV2 => include_cluster_authorized_operations endpoint_type include_fenced_brokers TAG_BUFFER
  include_cluster_authorized_operations => BOOLEAN
  endpoint_type => INT8
  include_fenced_brokers => BOOLEAN

# include_cluster_authorized_operations: Whether to include cluster authorized operations.
# endpoint_type: The endpoint type to describe. 1=brokers, 2=controllers.
# include_fenced_brokers: Whether to include fenced brokers when listing brokers.
# _tagged_fields: The tagged fields


DescribeClusterResponseV0 => throttle_time_ms error_code error_message cluster_id controller_id {brokers} cluster_authorized_operations TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  cluster_id => COMPACT_STRING
  controller_id => INT32
  brokers => broker_id host port rack TAG_BUFFER
    broker_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# brokers: Each broker in the response.
# broker_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.
# _tagged_fields: The tagged fields


DescribeClusterResponseV1 => throttle_time_ms error_code error_message endpoint_type cluster_id controller_id {brokers} cluster_authorized_operations TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  endpoint_type => INT8
  cluster_id => COMPACT_STRING
  controller_id => INT32
  brokers => broker_id host port rack TAG_BUFFER
    broker_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# endpoint_type: The endpoint type that was described. 1=brokers, 2=controllers.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# brokers: Each broker in the response.
# broker_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.
# _tagged_fields: The tagged fields


DescribeClusterResponseV2 => throttle_time_ms error_code error_message endpoint_type cluster_id controller_id {brokers} cluster_authorized_operations TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  endpoint_type => INT8
  cluster_id => COMPACT_STRING
  controller_id => INT32
  brokers => broker_id host port rack is_fenced TAG_BUFFER
    broker_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING
    is_fenced => BOOLEAN
  cluster_authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# endpoint_type: The endpoint type that was described. 1=brokers, 2=controllers.
# cluster_id: The cluster ID that responding broker belongs to.
# controller_id: The ID of the controller broker.
# brokers: Each broker in the response.
# broker_id: The broker ID.
# host: The broker hostname.
# port: The broker port.
# rack: The rack of the broker, or null if it has not been assigned to a rack.
# is_fenced: Whether the broker is fenced
# _tagged_fields: The tagged fields
# cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster.
# _tagged_fields: The tagged fields


#ApiKey: DescribeProducers, 61
DescribeProducersRequestV0 => {topics} TAG_BUFFER
  topics => name {partition_indexes} TAG_BUFFER
    name => COMPACT_STRING
    partition_indexes => INT32

# topics: The topics to list producers for.
# name: The topic name.
# partition_indexes: The indexes of the partitions to list producers for.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeProducersResponseV0 => throttle_time_ms {topics} TAG_BUFFER
  throttle_time_ms => INT32
  topics => name {partitions} TAG_BUFFER
    name => COMPACT_STRING
    partitions => partition_index error_code error_message {active_producers} TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING
      active_producers => producer_id producer_epoch last_sequence last_timestamp coordinator_epoch current_txn_start_offset TAG_BUFFER
        producer_id => INT64
        producer_epoch => INT32
        last_sequence => INT32
        last_timestamp => INT64
        coordinator_epoch => INT32
        current_txn_start_offset => INT64

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# name: The topic name.
# partitions: Each partition in the response.
# partition_index: The partition index.
# error_code: The partition error code, or 0 if there was no error.
# error_message: The partition error message, which may be null if no additional details are available.
# active_producers: The active producers for the partition.
# producer_id: The producer id.
# producer_epoch: The producer epoch.
# last_sequence: The last sequence number sent by the producer.
# last_timestamp: The last timestamp sent by the producer.
# coordinator_epoch: The current epoch of the producer group.
# current_txn_start_offset: The current transaction start offset of the producer.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: UnregisterBroker, 64
UnregisterBrokerRequestV0 => broker_id TAG_BUFFER
  broker_id => INT32

# broker_id: The broker ID to unregister.
# _tagged_fields: The tagged fields


UnregisterBrokerResponseV0 => throttle_time_ms error_code error_message TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The top-level error message, or `null` if there was no top-level error.
# _tagged_fields: The tagged fields


#ApiKey: DescribeTransactions, 65
DescribeTransactionsRequestV0 => {transactional_ids} TAG_BUFFER
  transactional_ids => COMPACT_STRING

# transactional_ids: Array of transactionalIds to include in describe results. If empty, then no results will be returned.
# _tagged_fields: The tagged fields


DescribeTransactionsResponseV0 => throttle_time_ms {transaction_states} TAG_BUFFER
  throttle_time_ms => INT32
  transaction_states => error_code transactional_id transaction_state transaction_timeout_ms transaction_start_time_ms producer_id producer_epoch {topics} TAG_BUFFER
    error_code => INT16
    transactional_id => COMPACT_STRING
    transaction_state => COMPACT_STRING
    transaction_timeout_ms => INT32
    transaction_start_time_ms => INT64
    producer_id => INT64
    producer_epoch => INT16
    topics => topic {partitions} TAG_BUFFER
      topic => COMPACT_STRING
      partitions => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# transaction_states: The current state of the transaction.
# error_code: The error code.
# transactional_id: The transactional id.
# transaction_state: The current transaction state of the producer.
# transaction_timeout_ms: The timeout in milliseconds for the transaction.
# transaction_start_time_ms: The start time of the transaction in milliseconds.
# producer_id: The current producer id associated with the transaction.
# producer_epoch: The current epoch associated with the producer id.
# topics: The set of partitions included in the current transaction (if active). When a transaction is preparing to commit or abort, this will include only partitions which do not have markers.
# topic: The topic name.
# partitions: The partition ids included in the current transaction.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListTransactions, 66
ListTransactionsRequestV0 => {state_filters} {producer_id_filters} TAG_BUFFER
  state_filters => COMPACT_STRING
  producer_id_filters => INT64

# state_filters: The transaction states to filter by: if empty, all transactions are returned; if non-empty, then only transactions matching one of the filtered states will be returned.
# producer_id_filters: The producerIds to filter by: if empty, all transactions will be returned; if non-empty, only transactions which match one of the filtered producerIds will be returned.
# _tagged_fields: The tagged fields


ListTransactionsRequestV1 => {state_filters} {producer_id_filters} duration_filter TAG_BUFFER
  state_filters => COMPACT_STRING
  producer_id_filters => INT64
  duration_filter => INT64

# state_filters: The transaction states to filter by: if empty, all transactions are returned; if non-empty, then only transactions matching one of the filtered states will be returned.
# producer_id_filters: The producerIds to filter by: if empty, all transactions will be returned; if non-empty, only transactions which match one of the filtered producerIds will be returned.
# duration_filter: Duration (in millis) to filter by: if < 0, all transactions will be returned; otherwise, only transactions running longer than this duration will be returned.
# _tagged_fields: The tagged fields


ListTransactionsRequestV2 => {state_filters} {producer_id_filters} duration_filter transactional_id_pattern TAG_BUFFER
  state_filters => COMPACT_STRING
  producer_id_filters => INT64
  duration_filter => INT64
  transactional_id_pattern => COMPACT_NULLABLE_STRING

# state_filters: The transaction states to filter by: if empty, all transactions are returned; if non-empty, then only transactions matching one of the filtered states will be returned.
# producer_id_filters: The producerIds to filter by: if empty, all transactions will be returned; if non-empty, only transactions which match one of the filtered producerIds will be returned.
# duration_filter: Duration (in millis) to filter by: if < 0, all transactions will be returned; otherwise, only transactions running longer than this duration will be returned.
# transactional_id_pattern: The transactional ID regular expression pattern to filter by: if it is empty or null, all transactions are returned; Otherwise then only the transactions matching the given regular expression will be returned.
# _tagged_fields: The tagged fields


ListTransactionsResponseV0 => throttle_time_ms error_code {unknown_state_filters} {transaction_states} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  unknown_state_filters => COMPACT_STRING
  transaction_states => transactional_id producer_id transaction_state TAG_BUFFER
    transactional_id => COMPACT_STRING
    producer_id => INT64
    transaction_state => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# unknown_state_filters: Set of state filters provided in the request which were unknown to the transaction coordinator.
# transaction_states: The current state of the transaction for the transactional id.
# transactional_id: The transactional id.
# producer_id: The producer id.
# transaction_state: The current transaction state of the producer.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListTransactionsResponseV1 => throttle_time_ms error_code {unknown_state_filters} {transaction_states} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  unknown_state_filters => COMPACT_STRING
  transaction_states => transactional_id producer_id transaction_state TAG_BUFFER
    transactional_id => COMPACT_STRING
    producer_id => INT64
    transaction_state => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# unknown_state_filters: Set of state filters provided in the request which were unknown to the transaction coordinator.
# transaction_states: The current state of the transaction for the transactional id.
# transactional_id: The transactional id.
# producer_id: The producer id.
# transaction_state: The current transaction state of the producer.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListTransactionsResponseV2 => throttle_time_ms error_code {unknown_state_filters} {transaction_states} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  unknown_state_filters => COMPACT_STRING
  transaction_states => transactional_id producer_id transaction_state TAG_BUFFER
    transactional_id => COMPACT_STRING
    producer_id => INT64
    transaction_state => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# unknown_state_filters: Set of state filters provided in the request which were unknown to the transaction coordinator.
# transaction_states: The current state of the transaction for the transactional id.
# transactional_id: The transactional id.
# producer_id: The producer id.
# transaction_state: The current transaction state of the producer.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ConsumerGroupHeartbeat, 68
ConsumerGroupHeartbeatRequestV0 => group_id member_id member_epoch instance_id rack_id rebalance_timeout_ms {subscribed_topic_names} server_assignor {topic_partitions} TAG_BUFFER
  group_id => COMPACT_STRING
  member_id => COMPACT_STRING
  member_epoch => INT32
  instance_id => COMPACT_NULLABLE_STRING
  rack_id => COMPACT_NULLABLE_STRING
  rebalance_timeout_ms => INT32
  subscribed_topic_names => COMPACT_STRING
  server_assignor => COMPACT_NULLABLE_STRING
  topic_partitions => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32

# group_id: The group identifier.
# member_id: The member id generated by the consumer. The member id must be kept during the entire lifetime of the consumer process.
# member_epoch: The current member epoch; 0 to join the group; -1 to leave the group; -2 to indicate that the static member will rejoin.
# instance_id: null if not provided or if it didn't change since the last heartbeat; the instance Id otherwise.
# rack_id: null if not provided or if it didn't change since the last heartbeat; the rack ID of consumer otherwise.
# rebalance_timeout_ms: -1 if it didn't change since the last heartbeat; the maximum time in milliseconds that the coordinator will wait on the member to revoke its partitions otherwise.
# subscribed_topic_names: null if it didn't change since the last heartbeat; the subscribed topic names otherwise.
# server_assignor: null if not used or if it didn't change since the last heartbeat; the server side assignor to use otherwise.
# topic_partitions: null if it didn't change since the last heartbeat; the partitions owned by the member.
# topic_id: The topic ID.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ConsumerGroupHeartbeatRequestV1 => group_id member_id member_epoch instance_id rack_id rebalance_timeout_ms {subscribed_topic_names} subscribed_topic_regex server_assignor {topic_partitions} TAG_BUFFER
  group_id => COMPACT_STRING
  member_id => COMPACT_STRING
  member_epoch => INT32
  instance_id => COMPACT_NULLABLE_STRING
  rack_id => COMPACT_NULLABLE_STRING
  rebalance_timeout_ms => INT32
  subscribed_topic_names => COMPACT_STRING
  subscribed_topic_regex => COMPACT_NULLABLE_STRING
  server_assignor => COMPACT_NULLABLE_STRING
  topic_partitions => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32

# group_id: The group identifier.
# member_id: The member id generated by the consumer. The member id must be kept during the entire lifetime of the consumer process.
# member_epoch: The current member epoch; 0 to join the group; -1 to leave the group; -2 to indicate that the static member will rejoin.
# instance_id: null if not provided or if it didn't change since the last heartbeat; the instance Id otherwise.
# rack_id: null if not provided or if it didn't change since the last heartbeat; the rack ID of consumer otherwise.
# rebalance_timeout_ms: -1 if it didn't change since the last heartbeat; the maximum time in milliseconds that the coordinator will wait on the member to revoke its partitions otherwise.
# subscribed_topic_names: null if it didn't change since the last heartbeat; the subscribed topic names otherwise.
# subscribed_topic_regex: null if it didn't change since the last heartbeat; the subscribed topic regex otherwise.
# server_assignor: null if not used or if it didn't change since the last heartbeat; the server side assignor to use otherwise.
# topic_partitions: null if it didn't change since the last heartbeat; the partitions owned by the member.
# topic_id: The topic ID.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ConsumerGroupHeartbeatResponseV0 => throttle_time_ms error_code error_message member_id member_epoch heartbeat_interval_ms assignment TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  member_id => COMPACT_NULLABLE_STRING
  member_epoch => INT32
  heartbeat_interval_ms => INT32
  assignment => {topic_partitions} TAG_BUFFER
    topic_partitions => topic_id {partitions} TAG_BUFFER
      topic_id => UUID
      partitions => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# member_id: The member id is generated by the consumer starting from version 1, while in version 0, it can be provided by users or generated by the group coordinator.
# member_epoch: The member epoch.
# heartbeat_interval_ms: The heartbeat interval in milliseconds.
# assignment: null if not provided; the assignment otherwise.
# topic_partitions: The partitions assigned to the member that can be used immediately.
# topic_id: The topic ID.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ConsumerGroupHeartbeatResponseV1 => throttle_time_ms error_code error_message member_id member_epoch heartbeat_interval_ms assignment TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  member_id => COMPACT_NULLABLE_STRING
  member_epoch => INT32
  heartbeat_interval_ms => INT32
  assignment => {topic_partitions} TAG_BUFFER
    topic_partitions => topic_id {partitions} TAG_BUFFER
      topic_id => UUID
      partitions => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# member_id: The member id is generated by the consumer starting from version 1, while in version 0, it can be provided by users or generated by the group coordinator.
# member_epoch: The member epoch.
# heartbeat_interval_ms: The heartbeat interval in milliseconds.
# assignment: null if not provided; the assignment otherwise.
# topic_partitions: The partitions assigned to the member that can be used immediately.
# topic_id: The topic ID.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ConsumerGroupDescribe, 69
ConsumerGroupDescribeRequestV0 => {group_ids} include_authorized_operations TAG_BUFFER
  group_ids => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# group_ids: The ids of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields


ConsumerGroupDescribeRequestV1 => {group_ids} include_authorized_operations TAG_BUFFER
  group_ids => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# group_ids: The ids of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields


ConsumerGroupDescribeResponseV0 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code error_message group_id group_state group_epoch assignment_epoch assignor_name {members} authorized_operations TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    group_epoch => INT32
    assignment_epoch => INT32
    assignor_name => COMPACT_STRING
    members => member_id instance_id rack_id member_epoch client_id client_host {subscribed_topic_names} subscribed_topic_regex assignment target_assignment TAG_BUFFER
      member_id => COMPACT_STRING
      instance_id => COMPACT_NULLABLE_STRING
      rack_id => COMPACT_NULLABLE_STRING
      member_epoch => INT32
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      subscribed_topic_names => COMPACT_STRING
      subscribed_topic_regex => COMPACT_NULLABLE_STRING
      assignment => {topic_partitions} TAG_BUFFER
        topic_partitions => topic_id topic_name {partitions} TAG_BUFFER
          topic_id => UUID
          topic_name => COMPACT_STRING
          partitions => INT32
      target_assignment => {topic_partitions} TAG_BUFFER
        topic_partitions => topic_id topic_name {partitions} TAG_BUFFER
          topic_id => UUID
          topic_name => COMPACT_STRING
          partitions => INT32
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# group_epoch: The group epoch.
# assignment_epoch: The assignment epoch.
# assignor_name: The selected assignor.
# members: The members.
# member_id: The member ID.
# instance_id: The member instance ID.
# rack_id: The member rack ID.
# member_epoch: The current member epoch.
# client_id: The client ID.
# client_host: The client host.
# subscribed_topic_names: The subscribed topic names.
# subscribed_topic_regex: the subscribed topic regex otherwise or null of not provided.
# assignment: The current assignment.
# topic_partitions: The assigned topic-partitions to the member.
# topic_id: The topic ID.
# topic_name: The topic name.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# target_assignment: The target assignment.
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ConsumerGroupDescribeResponseV1 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code error_message group_id group_state group_epoch assignment_epoch assignor_name {members} authorized_operations TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    group_epoch => INT32
    assignment_epoch => INT32
    assignor_name => COMPACT_STRING
    members => member_id instance_id rack_id member_epoch client_id client_host {subscribed_topic_names} subscribed_topic_regex assignment target_assignment member_type TAG_BUFFER
      member_id => COMPACT_STRING
      instance_id => COMPACT_NULLABLE_STRING
      rack_id => COMPACT_NULLABLE_STRING
      member_epoch => INT32
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      subscribed_topic_names => COMPACT_STRING
      subscribed_topic_regex => COMPACT_NULLABLE_STRING
      assignment => {topic_partitions} TAG_BUFFER
        topic_partitions => topic_id topic_name {partitions} TAG_BUFFER
          topic_id => UUID
          topic_name => COMPACT_STRING
          partitions => INT32
      target_assignment => {topic_partitions} TAG_BUFFER
        topic_partitions => topic_id topic_name {partitions} TAG_BUFFER
          topic_id => UUID
          topic_name => COMPACT_STRING
          partitions => INT32
      member_type => INT8
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# group_epoch: The group epoch.
# assignment_epoch: The assignment epoch.
# assignor_name: The selected assignor.
# members: The members.
# member_id: The member ID.
# instance_id: The member instance ID.
# rack_id: The member rack ID.
# member_epoch: The current member epoch.
# client_id: The client ID.
# client_host: The client host.
# subscribed_topic_names: The subscribed topic names.
# subscribed_topic_regex: the subscribed topic regex otherwise or null of not provided.
# assignment: The current assignment.
# topic_partitions: The assigned topic-partitions to the member.
# topic_id: The topic ID.
# topic_name: The topic name.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# target_assignment: The target assignment.
# member_type: -1 for unknown. 0 for classic member. +1 for consumer member.
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ControllerRegistration, 70
ControllerRegistrationRequestV0 => controller_id incarnation_id zk_migration_ready {listeners} {features} TAG_BUFFER
  controller_id => INT32
  incarnation_id => UUID
  zk_migration_ready => BOOLEAN
  listeners => name host port security_protocol TAG_BUFFER
    name => COMPACT_STRING
    host => COMPACT_STRING
    port => UINT16
    security_protocol => INT16
  features => name min_supported_version max_supported_version TAG_BUFFER
    name => COMPACT_STRING
    min_supported_version => INT16
    max_supported_version => INT16

# controller_id: The ID of the controller to register.
# incarnation_id: The controller incarnation ID, which is unique to each process run.
# zk_migration_ready: Set if the required configurations for ZK migration are present.
# listeners: The listeners of this controller.
# name: The name of the endpoint.
# host: The hostname.
# port: The port.
# security_protocol: The security protocol.
# _tagged_fields: The tagged fields
# features: The features on this controller.
# name: The feature name.
# min_supported_version: The minimum supported feature level.
# max_supported_version: The maximum supported feature level.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ControllerRegistrationResponseV0 => throttle_time_ms error_code error_message TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: Duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The response error code.
# error_message: The response error message, or null if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: GetTelemetrySubscriptions, 71
GetTelemetrySubscriptionsRequestV0 => client_instance_id TAG_BUFFER
  client_instance_id => UUID

# client_instance_id: Unique id for this client instance, must be set to 0 on the first request.
# _tagged_fields: The tagged fields


GetTelemetrySubscriptionsResponseV0 => throttle_time_ms error_code client_instance_id subscription_id {accepted_compression_types} push_interval_ms telemetry_max_bytes delta_temporality {requested_metrics} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  client_instance_id => UUID
  subscription_id => INT32
  accepted_compression_types => INT8
  push_interval_ms => INT32
  telemetry_max_bytes => INT32
  delta_temporality => BOOLEAN
  requested_metrics => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# client_instance_id: Assigned client instance id if ClientInstanceId was 0 in the request, else 0.
# subscription_id: Unique identifier for the current subscription set for this client instance.
# accepted_compression_types: Compression types that broker accepts for the PushTelemetryRequest.
# push_interval_ms: Configured push interval, which is the lowest configured interval in the current subscription set.
# telemetry_max_bytes: The maximum bytes of binary data the broker accepts in PushTelemetryRequest.
# delta_temporality: Flag to indicate monotonic/counter metrics are to be emitted as deltas or cumulative values.
# requested_metrics: Requested metrics prefix string match. Empty array: No metrics subscribed, Array[0] empty string: All metrics subscribed.
# _tagged_fields: The tagged fields


#ApiKey: PushTelemetry, 72
PushTelemetryRequestV0 => client_instance_id subscription_id terminating compression_type metrics TAG_BUFFER
  client_instance_id => UUID
  subscription_id => INT32
  terminating => BOOLEAN
  compression_type => INT8
  metrics => COMPACT_BYTES

# client_instance_id: Unique id for this client instance.
# subscription_id: Unique identifier for the current subscription.
# terminating: Client is terminating the connection.
# compression_type: Compression codec used to compress the metrics.
# metrics: Metrics encoded in OpenTelemetry MetricsData v1 protobuf format.
# _tagged_fields: The tagged fields


PushTelemetryResponseV0 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: AssignReplicasToDirs, 73
AssignReplicasToDirsRequestV0 => broker_id broker_epoch {directories} TAG_BUFFER
  broker_id => INT32
  broker_epoch => INT64
  directories => id {topics} TAG_BUFFER
    id => UUID
    topics => topic_id {partitions} TAG_BUFFER
      topic_id => UUID
      partitions => partition_index TAG_BUFFER
        partition_index => INT32

# broker_id: The ID of the requesting broker.
# broker_epoch: The epoch of the requesting broker.
# directories: The directories to which replicas should be assigned.
# id: The ID of the directory.
# topics: The topics assigned to the directory.
# topic_id: The ID of the assigned topic.
# partitions: The partitions assigned to the directory.
# partition_index: The partition index.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AssignReplicasToDirsResponseV0 => throttle_time_ms error_code {directories} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  directories => id {topics} TAG_BUFFER
    id => UUID
    topics => topic_id {partitions} TAG_BUFFER
      topic_id => UUID
      partitions => partition_index error_code TAG_BUFFER
        partition_index => INT32
        error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# directories: The list of directories and their assigned partitions.
# id: The ID of the directory.
# topics: The list of topics and their assigned partitions.
# topic_id: The ID of the assigned topic.
# partitions: The list of assigned partitions.
# partition_index: The partition index.
# error_code: The partition level error code.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ListConfigResources, 74
ListConfigResourcesRequestV0 => TAG_BUFFER

# _tagged_fields: The tagged fields


ListConfigResourcesRequestV1 => {resource_types} TAG_BUFFER
  resource_types => INT8

# resource_types: The list of resource type. If the list is empty, it uses default supported config resource types.
# _tagged_fields: The tagged fields


ListConfigResourcesResponseV0 => throttle_time_ms error_code {config_resources} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  config_resources => resource_name TAG_BUFFER
    resource_name => COMPACT_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# config_resources: Each config resource in the response.
# resource_name: The resource name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


ListConfigResourcesResponseV1 => throttle_time_ms error_code {config_resources} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  config_resources => resource_name resource_type TAG_BUFFER
    resource_name => COMPACT_STRING
    resource_type => INT8

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# config_resources: Each config resource in the response.
# resource_name: The resource name.
# resource_type: The resource type.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeTopicPartitions, 75
DescribeTopicPartitionsRequestV0 => {topics} response_partition_limit cursor TAG_BUFFER
  topics => name TAG_BUFFER
    name => COMPACT_STRING
  response_partition_limit => INT32
  cursor => topic_name partition_index TAG_BUFFER
    topic_name => COMPACT_STRING
    partition_index => INT32

# topics: The topics to fetch details for.
# name: The topic name.
# _tagged_fields: The tagged fields
# response_partition_limit: The maximum number of partitions included in the response.
# cursor: The first topic and partition index to fetch details for.
# topic_name: The name for the first topic to process.
# partition_index: The partition index to start with.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeTopicPartitionsResponseV0 => throttle_time_ms {topics} next_cursor TAG_BUFFER
  throttle_time_ms => INT32
  topics => error_code name topic_id is_internal {partitions} topic_authorized_operations TAG_BUFFER
    error_code => INT16
    name => COMPACT_NULLABLE_STRING
    topic_id => UUID
    is_internal => BOOLEAN
    partitions => error_code partition_index leader_id leader_epoch {replica_nodes} {isr_nodes} {eligible_leader_replicas} {last_known_elr} {offline_replicas} TAG_BUFFER
      error_code => INT16
      partition_index => INT32
      leader_id => INT32
      leader_epoch => INT32
      replica_nodes => INT32
      isr_nodes => INT32
      eligible_leader_replicas => INT32
      last_known_elr => INT32
      offline_replicas => INT32
    topic_authorized_operations => INT32
  next_cursor => topic_name partition_index TAG_BUFFER
    topic_name => COMPACT_STRING
    partition_index => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# topics: Each topic in the response.
# error_code: The topic error, or 0 if there was no error.
# name: The topic name.
# topic_id: The topic id.
# is_internal: True if the topic is internal.
# partitions: Each partition in the topic.
# error_code: The partition error, or 0 if there was no error.
# partition_index: The partition index.
# leader_id: The ID of the leader broker.
# leader_epoch: The leader epoch of this partition.
# replica_nodes: The set of all nodes that host this partition.
# isr_nodes: The set of nodes that are in sync with the leader for this partition.
# eligible_leader_replicas: The new eligible leader replicas otherwise.
# last_known_elr: The last known ELR.
# offline_replicas: The set of offline replicas of this partition.
# _tagged_fields: The tagged fields
# topic_authorized_operations: 32-bit bitfield to represent authorized operations for this topic.
# _tagged_fields: The tagged fields
# next_cursor: The next topic and partition index to fetch details for.
# topic_name: The name for the first topic to process.
# partition_index: The partition index to start with.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ShareGroupHeartbeat, 76
ShareGroupHeartbeatRequestV1 => group_id member_id member_epoch rack_id {subscribed_topic_names} TAG_BUFFER
  group_id => COMPACT_STRING
  member_id => COMPACT_STRING
  member_epoch => INT32
  rack_id => COMPACT_NULLABLE_STRING
  subscribed_topic_names => COMPACT_STRING

# group_id: The group identifier.
# member_id: The member id generated by the consumer. The member id must be kept during the entire lifetime of the consumer process.
# member_epoch: The current member epoch; 0 to join the group; -1 to leave the group.
# rack_id: null if not provided or if it didn't change since the last heartbeat; the rack ID of consumer otherwise.
# subscribed_topic_names: null if it didn't change since the last heartbeat; the subscribed topic names otherwise.
# _tagged_fields: The tagged fields




ShareGroupHeartbeatResponseV1 => throttle_time_ms error_code error_message member_id member_epoch heartbeat_interval_ms assignment TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  member_id => COMPACT_NULLABLE_STRING
  member_epoch => INT32
  heartbeat_interval_ms => INT32
  assignment => {topic_partitions} TAG_BUFFER
    topic_partitions => topic_id {partitions} TAG_BUFFER
      topic_id => UUID
      partitions => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# member_id: The member ID is generated by the consumer and provided by the consumer for all requests.
# member_epoch: The member epoch.
# heartbeat_interval_ms: The heartbeat interval in milliseconds.
# assignment: null if not provided; the assignment otherwise.
# topic_partitions: The partitions assigned to the member.
# topic_id: The topic ID.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ShareGroupDescribe, 77
ShareGroupDescribeRequestV1 => {group_ids} include_authorized_operations TAG_BUFFER
  group_ids => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# group_ids: The ids of the groups to describe.
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields




ShareGroupDescribeResponseV1 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code error_message group_id group_state group_epoch assignment_epoch assignor_name {members} authorized_operations TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    group_epoch => INT32
    assignment_epoch => INT32
    assignor_name => COMPACT_STRING
    members => member_id rack_id member_epoch client_id client_host {subscribed_topic_names} assignment TAG_BUFFER
      member_id => COMPACT_STRING
      rack_id => COMPACT_NULLABLE_STRING
      member_epoch => INT32
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      subscribed_topic_names => COMPACT_STRING
      assignment => {topic_partitions} TAG_BUFFER
        topic_partitions => topic_id topic_name {partitions} TAG_BUFFER
          topic_id => UUID
          topic_name => COMPACT_STRING
          partitions => INT32
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# group_epoch: The group epoch.
# assignment_epoch: The assignment epoch.
# assignor_name: The selected assignor.
# members: The members.
# member_id: The member ID.
# rack_id: The member rack ID.
# member_epoch: The current member epoch.
# client_id: The client ID.
# client_host: The client host.
# subscribed_topic_names: The subscribed topic names.
# assignment: The current assignment.
# topic_partitions: The assigned topic-partitions to the member.
# topic_id: The topic ID.
# topic_name: The topic name.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ShareFetch, 78
ShareFetchRequestV1 => group_id member_id share_session_epoch max_wait_ms min_bytes max_bytes max_records batch_size {topics} {forgotten_topics_data} TAG_BUFFER
  group_id => COMPACT_NULLABLE_STRING
  member_id => COMPACT_NULLABLE_STRING
  share_session_epoch => INT32
  max_wait_ms => INT32
  min_bytes => INT32
  max_bytes => INT32
  max_records => INT32
  batch_size => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index {acknowledgement_batches} TAG_BUFFER
      partition_index => INT32
      acknowledgement_batches => first_offset last_offset {acknowledge_types} TAG_BUFFER
        first_offset => INT64
        last_offset => INT64
        acknowledge_types => INT8
  forgotten_topics_data => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => INT32

# group_id: The group identifier.
# member_id: The member ID.
# share_session_epoch: The current share session epoch: 0 to open a share session; -1 to close it; otherwise increments for consecutive requests.
# max_wait_ms: The maximum time in milliseconds to wait for the response.
# min_bytes: The minimum bytes to accumulate in the response.
# max_bytes: The maximum bytes to fetch. See KIP-74 for cases where this limit may not be honored.
# max_records: The maximum number of records to fetch. This limit can be exceeded for alignment of batch boundaries.
# batch_size: The optimal number of records for batches of acquired records and acknowledgements.
# topics: The topics to fetch.
# topic_id: The unique topic ID.
# partitions: The partitions to fetch.
# partition_index: The partition index.
# acknowledgement_batches: Record batches to acknowledge.
# first_offset: First offset of batch of records to acknowledge.
# last_offset: Last offset (inclusive) of batch of records to acknowledge.
# acknowledge_types: Array of acknowledge types - 0:Gap,1:Accept,2:Release,3:Reject.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# forgotten_topics_data: The partitions to remove from this share session.
# topic_id: The unique topic ID.
# partitions: The partitions indexes to forget.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




ShareFetchResponseV1 => throttle_time_ms error_code error_message acquisition_lock_timeout_ms {responses} {node_endpoints} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  acquisition_lock_timeout_ms => INT32
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code error_message acknowledge_error_code acknowledge_error_message current_leader records {acquired_records} TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING
      acknowledge_error_code => INT16
      acknowledge_error_message => COMPACT_NULLABLE_STRING
      current_leader => leader_id leader_epoch TAG_BUFFER
        leader_id => INT32
        leader_epoch => INT32
      records => COMPACT_RECORDS
      acquired_records => first_offset last_offset delivery_count TAG_BUFFER
        first_offset => INT64
        last_offset => INT64
        delivery_count => INT16
  node_endpoints => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level response error code.
# error_message: The top-level error message, or null if there was no error.
# acquisition_lock_timeout_ms: The time in milliseconds for which the acquired records are locked.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The fetch error code, or 0 if there was no fetch error.
# error_message: The fetch error message, or null if there was no fetch error.
# acknowledge_error_code: The acknowledge error code, or 0 if there was no acknowledge error.
# acknowledge_error_message: The acknowledge error message, or null if there was no acknowledge error.
# current_leader: The current leader of the partition.
# leader_id: The ID of the current leader or -1 if the leader is unknown.
# leader_epoch: The latest known leader epoch.
# _tagged_fields: The tagged fields
# records: The record data.
# acquired_records: The acquired records.
# first_offset: The earliest offset in this batch of acquired records.
# last_offset: The last offset of this batch of acquired records.
# delivery_count: The delivery count of this batch of acquired records.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# node_endpoints: Endpoints for all current leaders enumerated in PartitionData with error NOT_LEADER_OR_FOLLOWER.
# node_id: The ID of the associated node.
# host: The node's hostname.
# port: The node's port.
# rack: The rack of the node, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: ShareAcknowledge, 79
ShareAcknowledgeRequestV1 => group_id member_id share_session_epoch {topics} TAG_BUFFER
  group_id => COMPACT_NULLABLE_STRING
  member_id => COMPACT_NULLABLE_STRING
  share_session_epoch => INT32
  topics => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index {acknowledgement_batches} TAG_BUFFER
      partition_index => INT32
      acknowledgement_batches => first_offset last_offset {acknowledge_types} TAG_BUFFER
        first_offset => INT64
        last_offset => INT64
        acknowledge_types => INT8

# group_id: The group identifier.
# member_id: The member ID.
# share_session_epoch: The current share session epoch: 0 to open a share session; -1 to close it; otherwise increments for consecutive requests.
# topics: The topics containing records to acknowledge.
# topic_id: The unique topic ID.
# partitions: The partitions containing records to acknowledge.
# partition_index: The partition index.
# acknowledgement_batches: Record batches to acknowledge.
# first_offset: First offset of batch of records to acknowledge.
# last_offset: Last offset (inclusive) of batch of records to acknowledge.
# acknowledge_types: Array of acknowledge types - 0:Gap,1:Accept,2:Release,3:Reject.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields




ShareAcknowledgeResponseV1 => throttle_time_ms error_code error_message {responses} {node_endpoints} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  responses => topic_id {partitions} TAG_BUFFER
    topic_id => UUID
    partitions => partition_index error_code error_message current_leader TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING
      current_leader => leader_id leader_epoch TAG_BUFFER
        leader_id => INT32
        leader_epoch => INT32
  node_endpoints => node_id host port rack TAG_BUFFER
    node_id => INT32
    host => COMPACT_STRING
    port => INT32
    rack => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top level response error code.
# error_message: The top-level error message, or null if there was no error.
# responses: The response topics.
# topic_id: The unique topic ID.
# partitions: The topic partitions.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# current_leader: The current leader of the partition.
# leader_id: The ID of the current leader or -1 if the leader is unknown.
# leader_epoch: The latest known leader epoch.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# node_endpoints: Endpoints for all current leaders enumerated in PartitionData with error NOT_LEADER_OR_FOLLOWER.
# node_id: The ID of the associated node.
# host: The node's hostname.
# port: The node's port.
# rack: The rack of the node, or null if it has not been assigned to a rack.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AddRaftVoter, 80
AddRaftVoterRequestV0 => cluster_id timeout_ms voter_id voter_directory_id {listeners} TAG_BUFFER
  cluster_id => COMPACT_NULLABLE_STRING
  timeout_ms => INT32
  voter_id => INT32
  voter_directory_id => UUID
  listeners => name host port TAG_BUFFER
    name => COMPACT_STRING
    host => COMPACT_STRING
    port => UINT16

# cluster_id: The cluster id.
# timeout_ms: The maximum time to wait for the request to complete before returning.
# voter_id: The replica id of the voter getting added to the topic partition.
# voter_directory_id: The directory id of the voter getting added to the topic partition.
# listeners: The endpoints that can be used to communicate with the voter.
# name: The name of the endpoint.
# host: The hostname.
# port: The port.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AddRaftVoterResponseV0 => throttle_time_ms error_code error_message TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: RemoveRaftVoter, 81
RemoveRaftVoterRequestV0 => cluster_id voter_id voter_directory_id TAG_BUFFER
  cluster_id => COMPACT_NULLABLE_STRING
  voter_id => INT32
  voter_directory_id => UUID

# cluster_id: The cluster id of the request.
# voter_id: The replica id of the voter getting removed from the topic partition.
# voter_directory_id: The directory id of the voter getting removed from the topic partition.
# _tagged_fields: The tagged fields


RemoveRaftVoterResponseV0 => throttle_time_ms error_code error_message TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: UpdateRaftVoter, 82
UpdateRaftVoterRequestV0 => cluster_id current_leader_epoch voter_id voter_directory_id {listeners} kraft_version_feature TAG_BUFFER
  cluster_id => COMPACT_NULLABLE_STRING
  current_leader_epoch => INT32
  voter_id => INT32
  voter_directory_id => UUID
  listeners => name host port TAG_BUFFER
    name => COMPACT_STRING
    host => COMPACT_STRING
    port => UINT16
  kraft_version_feature => min_supported_version max_supported_version TAG_BUFFER
    min_supported_version => INT16
    max_supported_version => INT16

# cluster_id: The cluster id.
# current_leader_epoch: The current leader epoch of the partition, -1 for unknown leader epoch.
# voter_id: The replica id of the voter getting updated in the topic partition.
# voter_directory_id: The directory id of the voter getting updated in the topic partition.
# listeners: The endpoint that can be used to communicate with the leader.
# name: The name of the endpoint.
# host: The hostname.
# port: The port.
# _tagged_fields: The tagged fields
# kraft_version_feature: The range of versions of the protocol that the replica supports.
# min_supported_version: The minimum supported KRaft protocol version.
# max_supported_version: The maximum supported KRaft protocol version.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


UpdateRaftVoterResponseV0 => throttle_time_ms error_code TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The error code, or 0 if there was no error.
# _tagged_fields: The tagged fields


#ApiKey: StreamsGroupHeartbeat, 88
StreamsGroupHeartbeatRequestV0 => group_id member_id member_epoch endpoint_information_epoch instance_id rack_id rebalance_timeout_ms topology {active_tasks} {standby_tasks} {warmup_tasks} process_id user_endpoint {client_tags} {task_offsets} {task_end_offsets} shutdown_application TAG_BUFFER
  group_id => COMPACT_STRING
  member_id => COMPACT_STRING
  member_epoch => INT32
  endpoint_information_epoch => INT32
  instance_id => COMPACT_NULLABLE_STRING
  rack_id => COMPACT_NULLABLE_STRING
  rebalance_timeout_ms => INT32
  topology => epoch {subtopologies} TAG_BUFFER
    epoch => INT32
    subtopologies => subtopology_id {source_topics} {source_topic_regex} {state_changelog_topics} {repartition_sink_topics} {repartition_source_topics} {copartition_groups} TAG_BUFFER
      subtopology_id => COMPACT_STRING
      source_topics => COMPACT_STRING
      source_topic_regex => COMPACT_STRING
      state_changelog_topics => name partitions replication_factor {topic_configs} TAG_BUFFER
        name => COMPACT_STRING
        partitions => INT32
        replication_factor => INT16
        topic_configs => key value TAG_BUFFER
          key => COMPACT_STRING
          value => COMPACT_STRING
      repartition_sink_topics => COMPACT_STRING
      repartition_source_topics => name partitions replication_factor {topic_configs} TAG_BUFFER
        name => COMPACT_STRING
        partitions => INT32
        replication_factor => INT16
        topic_configs => key value TAG_BUFFER
          key => COMPACT_STRING
          value => COMPACT_STRING
      copartition_groups => {source_topics} {source_topic_regex} {repartition_source_topics} TAG_BUFFER
        source_topics => INT16
        source_topic_regex => INT16
        repartition_source_topics => INT16
  active_tasks => subtopology_id {partitions} TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partitions => INT32
  standby_tasks => subtopology_id {partitions} TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partitions => INT32
  warmup_tasks => subtopology_id {partitions} TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partitions => INT32
  process_id => COMPACT_NULLABLE_STRING
  user_endpoint => host port TAG_BUFFER
    host => COMPACT_STRING
    port => UINT16
  client_tags => key value TAG_BUFFER
    key => COMPACT_STRING
    value => COMPACT_STRING
  task_offsets => subtopology_id partition offset TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partition => INT32
    offset => INT64
  task_end_offsets => subtopology_id partition offset TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partition => INT32
    offset => INT64
  shutdown_application => BOOLEAN

# group_id: The group identifier.
# member_id: The member ID generated by the streams consumer. The member ID must be kept during the entire lifetime of the streams consumer process.
# member_epoch: The current member epoch; 0 to join the group; -1 to leave the group; -2 to indicate that the static member will rejoin.
# endpoint_information_epoch: The current endpoint epoch of this client, represents the latest endpoint epoch this client received
# instance_id: null if not provided or if it didn't change since the last heartbeat; the instance ID for static membership otherwise.
# rack_id: null if not provided or if it didn't change since the last heartbeat; the rack ID of the member otherwise.
# rebalance_timeout_ms: -1 if it didn't change since the last heartbeat; the maximum time in milliseconds that the coordinator will wait on the member to revoke its tasks otherwise.
# topology: The topology metadata of the streams application. Used to initialize the topology of the group and to check if the topology corresponds to the topology initialized for the group. Only sent when memberEpoch = 0, must be non-empty. Null otherwise.
# epoch: The epoch of the topology. Used to check if the topology corresponds to the topology initialized on the brokers.
# subtopologies: The sub-topologies of the streams application.
# subtopology_id: String to uniquely identify the subtopology. Deterministically generated from the topology
# source_topics: The topics the topology reads from.
# source_topic_regex: The regular expressions identifying topics the subtopology reads from.
# state_changelog_topics: The set of state changelog topics associated with this subtopology. Created automatically.
# name: The name of the topic.
# partitions: The number of partitions in the topic. Can be 0 if no specific number of partitions is enforced. Always 0 for changelog topics.
# replication_factor: The replication factor of the topic. Can be 0 if the default replication factor should be used.
# topic_configs: Topic-level configurations as key-value pairs.
# key: key of the config
# value: value of the config
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# repartition_sink_topics: The repartition topics the subtopology writes to.
# repartition_source_topics: The set of source topics that are internally created repartition topics. Created automatically.
# copartition_groups: A subset of source topics that must be copartitioned.
# source_topics: The topics the topology reads from. Index into the array on the subtopology level.
# source_topic_regex: Regular expressions identifying topics the subtopology reads from. Index into the array on the subtopology level.
# repartition_source_topics: The set of source topics that are internally created repartition topics. Index into the array on the subtopology level.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# active_tasks: Currently owned active tasks for this client. Null if unchanged since last heartbeat.
# subtopology_id: The subtopology identifier.
# partitions: The partitions of the input topics processed by this member.
# _tagged_fields: The tagged fields
# standby_tasks: Currently owned standby tasks for this client. Null if unchanged since last heartbeat.
# warmup_tasks: Currently owned warm-up tasks for this client. Null if unchanged since last heartbeat.
# process_id: Identity of the streams instance that may have multiple consumers. Null if unchanged since last heartbeat.
# user_endpoint: User-defined endpoint for Interactive Queries. Null if unchanged since last heartbeat, or if not defined on the client.
# host: host of the endpoint
# port: port of the endpoint
# _tagged_fields: The tagged fields
# client_tags: Used for rack-aware assignment algorithm. Null if unchanged since last heartbeat.
# task_offsets: Cumulative changelog offsets for tasks. Only updated when a warm-up task has caught up, and according to the task offset interval. Null if unchanged since last heartbeat.
# subtopology_id: The subtopology identifier.
# partition: The partition.
# offset: The offset.
# _tagged_fields: The tagged fields
# task_end_offsets: Cumulative changelog end-offsets for tasks. Only updated when a warm-up task has caught up, and according to the task offset interval. Null if unchanged since last heartbeat.
# shutdown_application: Whether all Streams clients in the group should shut down.
# _tagged_fields: The tagged fields


StreamsGroupHeartbeatResponseV0 => throttle_time_ms error_code error_message member_id member_epoch heartbeat_interval_ms acceptable_recovery_lag task_offset_interval_ms {status} {active_tasks} {standby_tasks} {warmup_tasks} endpoint_information_epoch {partitions_by_user_endpoint} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  member_id => COMPACT_STRING
  member_epoch => INT32
  heartbeat_interval_ms => INT32
  acceptable_recovery_lag => INT32
  task_offset_interval_ms => INT32
  status => status_code status_detail TAG_BUFFER
    status_code => INT8
    status_detail => COMPACT_STRING
  active_tasks => subtopology_id {partitions} TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partitions => INT32
  standby_tasks => subtopology_id {partitions} TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partitions => INT32
  warmup_tasks => subtopology_id {partitions} TAG_BUFFER
    subtopology_id => COMPACT_STRING
    partitions => INT32
  endpoint_information_epoch => INT32
  partitions_by_user_endpoint => user_endpoint {active_partitions} {standby_partitions} TAG_BUFFER
    user_endpoint => host port TAG_BUFFER
      host => COMPACT_STRING
      port => UINT16
    active_partitions => topic {partitions} TAG_BUFFER
      topic => COMPACT_STRING
      partitions => INT32
    standby_partitions => topic {partitions} TAG_BUFFER
      topic => COMPACT_STRING
      partitions => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error
# error_message: The top-level error message, or null if there was no error.
# member_id: The member id is always generated by the streams consumer.
# member_epoch: The member epoch.
# heartbeat_interval_ms: The heartbeat interval in milliseconds.
# acceptable_recovery_lag: The maximal lag a warm-up task can have to be considered caught-up.
# task_offset_interval_ms: The interval in which the task changelog offsets on a client are updated on the broker. The offsets are sent with the next heartbeat after this time has passed.
# status: Indicate zero or more status for the group.  Null if unchanged since last heartbeat.
# status_code: A code to indicate that a particular status is active for the group membership
# status_detail: A string representation of the status.
# _tagged_fields: The tagged fields
# active_tasks: Assigned active tasks for this client. Null if unchanged since last heartbeat.
# subtopology_id: The subtopology identifier.
# partitions: The partitions of the input topics processed by this member.
# _tagged_fields: The tagged fields
# standby_tasks: Assigned standby tasks for this client. Null if unchanged since last heartbeat.
# warmup_tasks: Assigned warm-up tasks for this client. Null if unchanged since last heartbeat.
# endpoint_information_epoch: The endpoint epoch set in the response
# partitions_by_user_endpoint: Global assignment information used for IQ. Null if unchanged since last heartbeat.
# user_endpoint: User-defined endpoint to connect to the node
# host: host of the endpoint
# port: port of the endpoint
# _tagged_fields: The tagged fields
# active_partitions: All topic partitions materialized by active tasks on the node
# topic: topic name
# partitions: partitions
# _tagged_fields: The tagged fields
# standby_partitions: All topic partitions materialized by standby tasks on the node
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: StreamsGroupDescribe, 89
StreamsGroupDescribeRequestV0 => {group_ids} include_authorized_operations TAG_BUFFER
  group_ids => COMPACT_STRING
  include_authorized_operations => BOOLEAN

# group_ids: The ids of the groups to describe
# include_authorized_operations: Whether to include authorized operations.
# _tagged_fields: The tagged fields


StreamsGroupDescribeResponseV0 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => error_code error_message group_id group_state group_epoch assignment_epoch topology {members} authorized_operations TAG_BUFFER
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING
    group_id => COMPACT_STRING
    group_state => COMPACT_STRING
    group_epoch => INT32
    assignment_epoch => INT32
    topology => epoch {subtopologies} TAG_BUFFER
      epoch => INT32
      subtopologies => subtopology_id {source_topics} {repartition_sink_topics} {state_changelog_topics} {repartition_source_topics} TAG_BUFFER
        subtopology_id => COMPACT_STRING
        source_topics => COMPACT_STRING
        repartition_sink_topics => COMPACT_STRING
        state_changelog_topics => name partitions replication_factor {topic_configs} TAG_BUFFER
          name => COMPACT_STRING
          partitions => INT32
          replication_factor => INT16
          topic_configs => key value TAG_BUFFER
            key => COMPACT_STRING
            value => COMPACT_STRING
        repartition_source_topics => name partitions replication_factor {topic_configs} TAG_BUFFER
          name => COMPACT_STRING
          partitions => INT32
          replication_factor => INT16
          topic_configs => key value TAG_BUFFER
            key => COMPACT_STRING
            value => COMPACT_STRING
    members => member_id member_epoch instance_id rack_id client_id client_host topology_epoch process_id user_endpoint {client_tags} {task_offsets} {task_end_offsets} assignment target_assignment is_classic TAG_BUFFER
      member_id => COMPACT_STRING
      member_epoch => INT32
      instance_id => COMPACT_NULLABLE_STRING
      rack_id => COMPACT_NULLABLE_STRING
      client_id => COMPACT_STRING
      client_host => COMPACT_STRING
      topology_epoch => INT32
      process_id => COMPACT_STRING
      user_endpoint => host port TAG_BUFFER
        host => COMPACT_STRING
        port => UINT16
      client_tags => key value TAG_BUFFER
        key => COMPACT_STRING
        value => COMPACT_STRING
      task_offsets => subtopology_id partition offset TAG_BUFFER
        subtopology_id => COMPACT_STRING
        partition => INT32
        offset => INT64
      task_end_offsets => subtopology_id partition offset TAG_BUFFER
        subtopology_id => COMPACT_STRING
        partition => INT32
        offset => INT64
      assignment => {active_tasks} {standby_tasks} {warmup_tasks} TAG_BUFFER
        active_tasks => subtopology_id {partitions} TAG_BUFFER
          subtopology_id => COMPACT_STRING
          partitions => INT32
        standby_tasks => subtopology_id {partitions} TAG_BUFFER
          subtopology_id => COMPACT_STRING
          partitions => INT32
        warmup_tasks => subtopology_id {partitions} TAG_BUFFER
          subtopology_id => COMPACT_STRING
          partitions => INT32
      target_assignment => {active_tasks} {standby_tasks} {warmup_tasks} TAG_BUFFER
        active_tasks => subtopology_id {partitions} TAG_BUFFER
          subtopology_id => COMPACT_STRING
          partitions => INT32
        standby_tasks => subtopology_id {partitions} TAG_BUFFER
          subtopology_id => COMPACT_STRING
          partitions => INT32
        warmup_tasks => subtopology_id {partitions} TAG_BUFFER
          subtopology_id => COMPACT_STRING
          partitions => INT32
      is_classic => BOOLEAN
    authorized_operations => INT32

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: Each described group.
# error_code: The describe error, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# group_id: The group ID string.
# group_state: The group state string, or the empty string.
# group_epoch: The group epoch.
# assignment_epoch: The assignment epoch.
# topology: The topology metadata currently initialized for the streams application. Can be null in case of a describe error.
# epoch: The epoch of the currently initialized topology for this group.
# subtopologies: The subtopologies of the streams application. This contains the configured subtopologies, where the number of partitions are set and any regular expressions are resolved to actual topics. Null if the group is uninitialized, source topics are missing or incorrectly partitioned.
# subtopology_id: String to uniquely identify the subtopology.
# source_topics: The topics the subtopology reads from.
# repartition_sink_topics: The repartition topics the subtopology writes to.
# state_changelog_topics: The set of state changelog topics associated with this subtopology. Created automatically.
# name: The name of the topic.
# partitions: The number of partitions in the topic. Can be 0 if no specific number of partitions is enforced. Always 0 for changelog topics.
# replication_factor: The replication factor of the topic. Can be 0 if the default replication factor should be used.
# topic_configs: Topic-level configurations as key-value pairs.
# key: key of the config
# value: value of the config
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# repartition_source_topics: The set of source topics that are internally created repartition topics. Created automatically.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# members: The members.
# member_id: The member ID.
# member_epoch: The member epoch.
# instance_id: The member instance ID for static membership.
# rack_id: The rack ID.
# client_id: The client ID.
# client_host: The client host.
# topology_epoch: The epoch of the topology on the client.
# process_id: Identity of the streams instance that may have multiple clients. 
# user_endpoint: User-defined endpoint for Interactive Queries. Null if not defined for this client.
# host: host of the endpoint
# port: port of the endpoint
# _tagged_fields: The tagged fields
# client_tags: Used for rack-aware assignment algorithm.
# task_offsets: Cumulative changelog offsets for tasks.
# subtopology_id: The subtopology identifier.
# partition: The partition.
# offset: The offset.
# _tagged_fields: The tagged fields
# task_end_offsets: Cumulative changelog end offsets for tasks.
# assignment: The current assignment.
# active_tasks: Active tasks for this client.
# subtopology_id: The subtopology identifier.
# partitions: The partitions of the input topics processed by this member.
# _tagged_fields: The tagged fields
# standby_tasks: Standby tasks for this client.
# warmup_tasks: Warm-up tasks for this client. 
# _tagged_fields: The tagged fields
# target_assignment: The target assignment.
# is_classic: True for classic members that have not been upgraded yet.
# _tagged_fields: The tagged fields
# authorized_operations: 32-bit bitfield to represent authorized operations for this group.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DescribeShareGroupOffsets, 90
DescribeShareGroupOffsetsRequestV0 => {groups} TAG_BUFFER
  groups => group_id {topics} TAG_BUFFER
    group_id => COMPACT_STRING
    topics => topic_name {partitions} TAG_BUFFER
      topic_name => COMPACT_STRING
      partitions => INT32

# groups: The groups to describe offsets for.
# group_id: The group identifier.
# topics: The topics to describe offsets for, or null for all topic-partitions.
# topic_name: The topic name.
# partitions: The partitions.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DescribeShareGroupOffsetsResponseV0 => throttle_time_ms {groups} TAG_BUFFER
  throttle_time_ms => INT32
  groups => group_id {topics} error_code error_message TAG_BUFFER
    group_id => COMPACT_STRING
    topics => topic_name topic_id {partitions} TAG_BUFFER
      topic_name => COMPACT_STRING
      topic_id => UUID
      partitions => partition_index start_offset leader_epoch error_code error_message TAG_BUFFER
        partition_index => INT32
        start_offset => INT64
        leader_epoch => INT32
        error_code => INT16
        error_message => COMPACT_NULLABLE_STRING
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# groups: The results for each group.
# group_id: The group identifier.
# topics: The results for each topic.
# topic_name: The topic name.
# topic_id: The unique topic ID.
# partition_index: The partition index.
# start_offset: The share-partition start offset.
# leader_epoch: The leader epoch of the partition.
# error_code: The partition-level error code, or 0 if there was no error.
# error_message: The partition-level error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# error_code: The group-level error code, or 0 if there was no error.
# error_message: The group-level error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: AlterShareGroupOffsets, 91
AlterShareGroupOffsetsRequestV0 => group_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  topics => topic_name {partitions} TAG_BUFFER
    topic_name => COMPACT_STRING
    partitions => partition_index start_offset TAG_BUFFER
      partition_index => INT32
      start_offset => INT64

# group_id: The group identifier.
# topics: The topics to alter offsets for.
# topic_name: The topic name.
# partitions: Each partition to alter offsets for.
# partition_index: The partition index.
# start_offset: The share-partition start offset.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


AlterShareGroupOffsetsResponseV0 => throttle_time_ms error_code error_message {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  responses => topic_name topic_id {partitions} TAG_BUFFER
    topic_name => COMPACT_STRING
    topic_id => UUID
    partitions => partition_index error_code error_message TAG_BUFFER
      partition_index => INT32
      error_code => INT16
      error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# responses: The results for each topic.
# topic_name: The topic name.
# topic_id: The unique topic ID.
# partition_index: The partition index.
# error_code: The error code, or 0 if there was no error.
# error_message: The error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


#ApiKey: DeleteShareGroupOffsets, 92
DeleteShareGroupOffsetsRequestV0 => group_id {topics} TAG_BUFFER
  group_id => COMPACT_STRING
  topics => topic_name TAG_BUFFER
    topic_name => COMPACT_STRING

# group_id: The group identifier.
# topics: The topics to delete offsets for.
# topic_name: The topic name.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


DeleteShareGroupOffsetsResponseV0 => throttle_time_ms error_code error_message {responses} TAG_BUFFER
  throttle_time_ms => INT32
  error_code => INT16
  error_message => COMPACT_NULLABLE_STRING
  responses => topic_name topic_id error_code error_message TAG_BUFFER
    topic_name => COMPACT_STRING
    topic_id => UUID
    error_code => INT16
    error_message => COMPACT_NULLABLE_STRING

# throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota.
# error_code: The top-level error code, or 0 if there was no error.
# error_message: The top-level error message, or null if there was no error.
# responses: The results for each topic.
# topic_name: The topic name.
# topic_id: The unique topic ID.
# error_code: The topic-level error code, or 0 if there was no error.
# error_message: The topic-level error message, or null if there was no error.
# _tagged_fields: The tagged fields
# _tagged_fields: The tagged fields


